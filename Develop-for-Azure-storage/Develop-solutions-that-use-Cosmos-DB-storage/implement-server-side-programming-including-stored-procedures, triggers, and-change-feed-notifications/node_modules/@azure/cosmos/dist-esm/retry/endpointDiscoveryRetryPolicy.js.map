{"version":3,"file":"endpointDiscoveryRetryPolicy.js","sourceRoot":"","sources":["../../src/retry/endpointDiscoveryRetryPolicy.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAMjD;;;GAGG;AACH,MAAM,OAAO,4BAA4B;IAWvC;;;OAGG;IACH,YACU,qBAA4C,EAC5C,aAA4B;QAD5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;QAEpC,IAAI,CAAC,QAAQ,GAAG,4BAA4B,CAAC,QAAQ,CAAC;QACtD,IAAI,CAAC,wBAAwB,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,4BAA4B,CAAC,cAAc,CAAC;IACpE,CAAC;IAED;;;OAGG;IACU,WAAW,CACtB,GAAkB,EAClB,YAA2B,EAC3B,gBAAyB;;YAEzB,IAAI,CAAC,GAAG,EAAE;gBACR,OAAO,KAAK,CAAC;aACd;YAED,IAAI,CAAC,YAAY,IAAI,CAAC,gBAAgB,EAAE;gBACtC,OAAO,KAAK,CAAC;aACd;YAED,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE;gBACvD,OAAO,KAAK,CAAC;aACd;YAED,IAAI,IAAI,CAAC,wBAAwB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClD,OAAO,KAAK,CAAC;aACd;YAED,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAEhC,IAAI,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBACrC,MAAM,IAAI,CAAC,qBAAqB,CAAC,qCAAqC,CAAC,gBAAgB,CAAC,CAAC;aAC1F;iBAAM;gBACL,MAAM,IAAI,CAAC,qBAAqB,CAAC,sCAAsC,CAAC,gBAAgB,CAAC,CAAC;aAC3F;YAED,YAAY,CAAC,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC;YACxD,YAAY,CAAC,6BAA6B,GAAG,KAAK,CAAC;YACnD,YAAY,CAAC,gCAAgC,GAAG,KAAK,CAAC;YAEtD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;;AAtDuB,qCAAQ,GAAG,GAAG,CAAC,CAAC,kBAAkB;AAClC,2CAAc,GAAG,IAAI,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OperationType } from \"../common\";\nimport { isReadRequest } from \"../common/helper\";\nimport { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport { ErrorResponse } from \"../request\";\nimport { RetryContext } from \"./RetryContext\";\nimport { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * This class implements the retry policy for endpoint discovery.\n * @hidden\n */\nexport class EndpointDiscoveryRetryPolicy implements RetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number;\n  /** Retry interval in milliseconds. */\n  public retryAfterInMs: number;\n\n  /** Max number of retry attempts to perform. */\n  private maxTries: number;\n  private static readonly maxTries = 120; // TODO: Constant?\n  private static readonly retryAfterInMs = 1000;\n\n  /**\n   * @constructor EndpointDiscoveryRetryPolicy\n   * @param {object} globalEndpointManager The GlobalEndpointManager instance.\n   */\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private operationType: OperationType\n  ) {\n    this.maxTries = EndpointDiscoveryRetryPolicy.maxTries;\n    this.currentRetryAttemptCount = 0;\n    this.retryAfterInMs = EndpointDiscoveryRetryPolicy.retryAfterInMs;\n  }\n\n  /**\n   * Determines whether the request should be retried or not.\n   * @param {object} err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    retryContext?: RetryContext,\n    locationEndpoint?: string\n  ): Promise<boolean | [boolean, string]> {\n    if (!err) {\n      return false;\n    }\n\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n\n    if (!this.globalEndpointManager.enableEndpointDiscovery) {\n      return false;\n    }\n\n    if (this.currentRetryAttemptCount >= this.maxTries) {\n      return false;\n    }\n\n    this.currentRetryAttemptCount++;\n\n    if (isReadRequest(this.operationType)) {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForRead(locationEndpoint);\n    } else {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForWrite(locationEndpoint);\n    }\n\n    retryContext.retryCount = this.currentRetryAttemptCount;\n    retryContext.clearSessionTokenNotAvailable = false;\n    retryContext.retryRequestOnPreferredLocations = false;\n\n    return true;\n  }\n}\n"]}