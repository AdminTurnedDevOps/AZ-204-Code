{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/common/logger.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,QAAQ,MAAM,OAAO,CAAC;AAE7B,cAAc;AACd,IAAI,iBAAiB,GAAG,YAAY,CAAC;AAErC,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE;IACjF,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;CAClD;AAED,cAAc;AACd,MAAM,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAKvC,cAAc;AACd,MAAM,WAAW,GAAG,CAAC,eAAkC,EAAE,KAAe,EAAE,EAAE;IAC1E,OAAO,CAAC,OAAwC,EAAE,EAAE;QAClD,IAAI,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACrC,eAAe,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,GAAG,KAAK,GAAG,OAAO,EAAE,OAAO,CAAC,CAAC;SACnF;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,cAAc;AACd,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,SAAiB,EAAE,EAAE;IAC1C,MAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACtD,OAAO;QACL,KAAK,EAAE,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC;QAC5C,KAAK,EAAE,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC;QAC5C,IAAI,EAAE,WAAW,CAAC,eAAe,EAAE,MAAM,CAAC;QAC1C,IAAI,EAAE,WAAW,CAAC,eAAe,EAAE,MAAM,CAAC;QAC1C,KAAK,EAAE,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC;KAC7C,CAAC;AACJ,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debugLib from \"debug\";\n\n/** @hidden */\nlet cosmosLevelFilter = \"warn|error\";\n\nif (typeof process !== \"undefined\" && process.env && process.env.COSMOS_LOG_LEVEL) {\n  cosmosLevelFilter = process.env.COSMOS_LOG_LEVEL;\n}\n\n/** @hidden */\nconst cosmosDebug = debugLib(\"cosmos\");\n\n/** @hidden */\ntype logLevel = \"silly\" | \"debug\" | \"info\" | \"warn\" | \"error\";\n\n/** @hidden */\nconst levelLogger = (namespaceLogger: debugLib.Debugger, level: logLevel) => {\n  return (message: string | { [key: string]: any }) => {\n    if (cosmosLevelFilter.includes(level)) {\n      namespaceLogger(\"[\" + new Date().toISOString() + \"][\" + level + \"]: %o\", message);\n    }\n  };\n};\n\n/** @hidden */\nexport const logger = (namespace: string) => {\n  const namespaceLogger = cosmosDebug.extend(namespace);\n  return {\n    silly: levelLogger(namespaceLogger, \"silly\"),\n    debug: levelLogger(namespaceLogger, \"debug\"),\n    info: levelLogger(namespaceLogger, \"info\"),\n    warn: levelLogger(namespaceLogger, \"warn\"),\n    error: levelLogger(namespaceLogger, \"error\")\n  };\n};\n"]}