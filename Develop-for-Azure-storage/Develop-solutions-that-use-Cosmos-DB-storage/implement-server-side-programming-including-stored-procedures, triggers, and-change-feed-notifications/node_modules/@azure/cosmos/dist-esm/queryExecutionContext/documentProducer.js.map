{"version":3,"file":"documentProducer.js","sourceRoot":"","sources":["../../src/queryExecutionContext/documentProducer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../ClientContext\";\nimport {\n  Constants,\n  getIdFromLink,\n  getPathFromLink,\n  ResourceType,\n  StatusCodes,\n  SubStatusCodes\n} from \"../common\";\nimport { FeedOptions } from \"../request\";\nimport { Response } from \"../request\";\nimport { DefaultQueryExecutionContext } from \"./defaultQueryExecutionContext\";\nimport { FetchResult, FetchResultType } from \"./FetchResult\";\nimport { CosmosHeaders, getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { FetchFunctionCallback, SqlQuerySpec } from \"./index\";\n\n/** @hidden */\nexport class DocumentProducer {\n  private collectionLink: string;\n  private query: string | SqlQuerySpec;\n  public targetPartitionKeyRange: any; // TODO: any partitionkeyrange\n  public fetchResults: FetchResult[];\n  public allFetched: boolean;\n  private err: Error;\n  public previousContinuationToken: string;\n  public continuationToken: string;\n  public generation: number = 0;\n  private respHeaders: CosmosHeaders;\n  private internalExecutionContext: DefaultQueryExecutionContext;\n\n  /**\n   * Provides the Target Partition Range Query Execution Context.\n   * @constructor DocumentProducer\n   * @param {ClientContext} clientContext        - The service endpoint to use to create the client.\n   * @param {String} collectionLink                - Represents collection link\n   * @param {SqlQuerySpec | string} query          - A SQL query.\n   * @param {object} targetPartitionKeyRange       - Query Target Partition key Range\n   * @ignore\n   */\n  constructor(\n    private clientContext: ClientContext,\n    collectionLink: string,\n    query: SqlQuerySpec,\n    targetPartitionKeyRange: any, // TODO: any partition key range\n    options: FeedOptions\n  ) {\n    // TODO: any options\n    this.collectionLink = collectionLink;\n    this.query = query;\n    this.targetPartitionKeyRange = targetPartitionKeyRange;\n    this.fetchResults = [];\n\n    this.allFetched = false;\n    this.err = undefined;\n\n    this.previousContinuationToken = undefined;\n    this.continuationToken = undefined;\n    this.respHeaders = getInitialHeader();\n\n    // tslint:disable-next-line:no-shadowed-variable\n    this.internalExecutionContext = new DefaultQueryExecutionContext(options, this.fetchFunction);\n  }\n  /**\n   * Synchronously gives the contiguous buffered results (stops at the first non result) if any\n   * @returns {Object}       - buffered current items if any\n   * @ignore\n   */\n  public peekBufferedItems() {\n    const bufferedResults = [];\n    for (let i = 0, done = false; i < this.fetchResults.length && !done; i++) {\n      const fetchResult = this.fetchResults[i];\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          done = true;\n          break;\n        case FetchResultType.Exception:\n          done = true;\n          break;\n        case FetchResultType.Result:\n          bufferedResults.push(fetchResult.feedResponse);\n          break;\n      }\n    }\n    return bufferedResults;\n  }\n\n  public fetchFunction: FetchFunctionCallback = async (options: any) => {\n    const path = getPathFromLink(this.collectionLink, ResourceType.item);\n    const id = getIdFromLink(this.collectionLink);\n\n    return this.clientContext.queryFeed({\n      path,\n      resourceType: ResourceType.item,\n      resourceId: id,\n      resultFn: (result: any) => result.Documents,\n      query: this.query,\n      options,\n      partitionKeyRangeId: this.targetPartitionKeyRange[\"id\"]\n    });\n  };\n\n  public hasMoreResults() {\n    return this.internalExecutionContext.hasMoreResults() || this.fetchResults.length !== 0;\n  }\n\n  public gotSplit() {\n    const fetchResult = this.fetchResults[0];\n    if (fetchResult.fetchResultType === FetchResultType.Exception) {\n      if (DocumentProducer._needPartitionKeyRangeCacheRefresh(fetchResult.error)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _getAndResetActiveResponseHeaders() {\n    const ret = this.respHeaders;\n    this.respHeaders = getInitialHeader();\n    return ret;\n  }\n\n  private _updateStates(err: any, allFetched: boolean) {\n    // TODO: any Error\n    if (err) {\n      this.err = err;\n      return;\n    }\n    if (allFetched) {\n      this.allFetched = true;\n    }\n    if (this.internalExecutionContext.continuationToken === this.continuationToken) {\n      // nothing changed\n      return;\n    }\n    this.previousContinuationToken = this.continuationToken;\n    this.continuationToken = this.internalExecutionContext.continuationToken;\n  }\n\n  private static _needPartitionKeyRangeCacheRefresh(error: any) {\n    // TODO: error\n    return (\n      error.code === StatusCodes.Gone &&\n      \"substatus\" in error &&\n      error[\"substatus\"] === SubStatusCodes.PartitionKeyRangeGone\n    );\n  }\n\n  /**\n   * Fetches and bufferes the next page of results and executes the given callback\n   * @memberof DocumentProducer\n   * @instance\n   */\n  public async bufferMore(): Promise<Response<any>> {\n    if (this.err) {\n      throw this.err;\n    }\n\n    try {\n      const {\n        result: resources,\n        headers: headerResponse\n      } = await this.internalExecutionContext.fetchMore();\n      ++this.generation;\n      this._updateStates(undefined, resources === undefined);\n      if (resources !== undefined) {\n        // some more results\n        resources.forEach((element: any) => {\n          // TODO: resources any\n          this.fetchResults.push(new FetchResult(element, undefined));\n        });\n      }\n\n      // need to modify the header response so that the query metrics are per partition\n      if (headerResponse != null && Constants.HttpHeaders.QueryMetrics in headerResponse) {\n        // \"0\" is the default partition before one is actually assigned.\n        const queryMetrics = headerResponse[Constants.HttpHeaders.QueryMetrics][\"0\"];\n\n        // Wraping query metrics in a object where the keys are the partition key range.\n        headerResponse[Constants.HttpHeaders.QueryMetrics] = {};\n        headerResponse[Constants.HttpHeaders.QueryMetrics][\n          this.targetPartitionKeyRange.id\n        ] = queryMetrics;\n      }\n\n      return { result: resources, headers: headerResponse };\n    } catch (err) {\n      // TODO: any error\n      if (DocumentProducer._needPartitionKeyRangeCacheRefresh(err)) {\n        // Split just happend\n        // Buffer the error so the execution context can still get the feedResponses in the itemBuffer\n        const bufferedError = new FetchResult(undefined, err);\n        this.fetchResults.push(bufferedError);\n        // Putting a dummy result so that the rest of code flows\n        return { result: [bufferedError], headers: err.headers };\n      } else {\n        this._updateStates(err, err.resources === undefined);\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Synchronously gives the bufferend current item if any\n   * @returns {Object}       - buffered current item if any\n   * @ignore\n   */\n  public getTargetParitionKeyRange() {\n    return this.targetPartitionKeyRange;\n  }\n\n  /**\n   * Execute a provided function on the next element in the DocumentProducer.\n   * @memberof DocumentProducer\n   * @instance\n   * @param {callback} callback - Function to execute for each element. the function \\\n   * takes two parameters error, element.\n   */\n  public async nextItem(): Promise<Response<any>> {\n    if (this.err) {\n      this._updateStates(this.err, undefined);\n      throw this.err;\n    }\n\n    try {\n      const { result, headers } = await this.current();\n\n      const fetchResult = this.fetchResults.shift();\n      this._updateStates(undefined, result === undefined);\n      if (fetchResult.feedResponse !== result) {\n        throw new Error(`Expected ${fetchResult.feedResponse} to equal ${result}`);\n      }\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          return { result: undefined, headers };\n        case FetchResultType.Exception:\n          fetchResult.error.headers = headers;\n          throw fetchResult.error;\n        case FetchResultType.Result:\n          return { result: fetchResult.feedResponse, headers };\n      }\n    } catch (err) {\n      this._updateStates(err, err.item === undefined);\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieve the current element on the DocumentProducer.\n   * @memberof DocumentProducer\n   * @instance\n   * @param {callback} callback - Function to execute for the current element. \\\n   * the function takes two parameters error, element.\n   */\n  public async current(): Promise<Response<any>> {\n    // If something is buffered just give that\n    if (this.fetchResults.length > 0) {\n      const fetchResult = this.fetchResults[0];\n      // Need to unwrap fetch results\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          return {\n            result: undefined,\n            headers: this._getAndResetActiveResponseHeaders()\n          };\n        case FetchResultType.Exception:\n          fetchResult.error.headers = this._getAndResetActiveResponseHeaders();\n          throw fetchResult.error;\n        case FetchResultType.Result:\n          return {\n            result: fetchResult.feedResponse,\n            headers: this._getAndResetActiveResponseHeaders()\n          };\n      }\n    }\n\n    // If there isn't anymore items left to fetch then let the user know.\n    if (this.allFetched) {\n      return {\n        result: undefined,\n        headers: this._getAndResetActiveResponseHeaders()\n      };\n    }\n\n    // If there are no more bufferd items and there are still items to be fetched then buffer more\n    const { result, headers } = await this.bufferMore();\n    mergeHeaders(this.respHeaders, headers);\n    if (result === undefined) {\n      return { result: undefined, headers: this.respHeaders };\n    }\n    return this.current();\n  }\n}\n"]}