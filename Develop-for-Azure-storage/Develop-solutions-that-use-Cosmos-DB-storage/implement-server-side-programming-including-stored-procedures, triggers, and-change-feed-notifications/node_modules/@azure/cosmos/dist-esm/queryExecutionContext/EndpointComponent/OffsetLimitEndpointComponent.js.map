{"version":3,"file":"OffsetLimitEndpointComponent.js","sourceRoot":"","sources":["../../../src/queryExecutionContext/EndpointComponent/OffsetLimitEndpointComponent.ts"],"names":[],"mappings":";AAIA,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAEhE,cAAc;AACd,MAAM,OAAO,4BAA4B;IACvC,YACU,gBAAkC,EAClC,MAAc,EACd,KAAa;QAFb,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAQ;IACpB,CAAC;IAES,QAAQ;;YACnB,MAAM,gBAAgB,GAAG,gBAAgB,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtB,iEAAiE;gBACjE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;gBAC3D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;aACzC;YACD,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;gBAClB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;gBACnE,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;gBACxC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;aAC9C;YACD,iDAAiD;YACjD,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC;QAC5D,CAAC;KAAA;IAEM,cAAc;QACnB,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;IACvF,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n\n/** @hidden */\nexport class OffsetLimitEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private offset: number,\n    private limit: number\n  ) {}\n\n  public async nextItem(): Promise<Response<any>> {\n    const aggregateHeaders = getInitialHeader();\n    while (this.offset > 0) {\n      // Grab next item but ignore the result. We only need the headers\n      const { headers } = await this.executionContext.nextItem();\n      this.offset--;\n      mergeHeaders(aggregateHeaders, headers);\n    }\n    if (this.limit > 0) {\n      const { result, headers } = await this.executionContext.nextItem();\n      this.limit--;\n      mergeHeaders(aggregateHeaders, headers);\n      return { result, headers: aggregateHeaders };\n    }\n    // If both limit and offset are 0, return nothing\n    return { result: undefined, headers: getInitialHeader() };\n  }\n\n  public hasMoreResults() {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n}\n"]}