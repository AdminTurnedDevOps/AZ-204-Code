{"version":3,"file":"Permissions.js","sourceRoot":"","sources":["../../../src/client/Permission/Permissions.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAE7F,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAIpD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAG1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAE1D;;;;GAIG;AACH,MAAM,OAAO,WAAW;IACtB;;;OAGG;IACH,YAA4B,IAAU,EAAmB,aAA4B;QAAzD,SAAI,GAAJ,IAAI,CAAM;QAAmB,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAclF,KAAK,CAAI,KAAmB,EAAE,OAAqB;QACxD,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;QACrE,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAExC,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,YAAY,EAAE,EAAE;YAC5E,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;gBAClC,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,UAAU;gBACrC,UAAU,EAAE,EAAE;gBACd,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW;gBACxC,KAAK;gBACL,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACI,OAAO,CAAC,OAAqB;QAClC,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACU,MAAM,CACjB,IAA0B,EAC1B,OAAwB;;YAExB,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBAC/B,MAAM,GAAG,CAAC;aACX;YAED,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;YACrE,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAExC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAuC;gBACrF,IAAI;gBACJ,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,UAAU;gBACrC,UAAU,EAAE,EAAE;gBACd,OAAO;aACR,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC9E,OAAO,IAAI,kBAAkB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACvF,CAAC;KAAA;IAED;;;;;OAKG;IACU,MAAM,CACjB,IAA0B,EAC1B,OAAwB;;YAExB,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBAC/B,MAAM,GAAG,CAAC;aACX;YAED,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;YACrE,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAExC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAuC;gBACrF,IAAI;gBACJ,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,UAAU;gBACrC,UAAU,EAAE,EAAE;gBACd,OAAO;aACR,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC9E,OAAO,IAAI,kBAAkB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACvF,CAAC;KAAA;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"../User\";\nimport { Permission } from \"./Permission\";\nimport { PermissionBody } from \"./PermissionBody\";\nimport { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\n\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user The parent {@link User}.\n   */\n  constructor(public readonly user: User, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Query all permissions.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all permissions.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: (result) => result.Permissions,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all permissions.\n   * @param options\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body Represents the body of the permission.\n   */\n  public async create(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    const response = await this.clientContext.create<PermissionDefinition, PermissionBody>({\n      body,\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    const ref = new Permission(this.user, response.result.id, this.clientContext);\n    return new PermissionResponse(response.result, response.headers, response.code, ref);\n  }\n\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n  public async upsert(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    const response = await this.clientContext.upsert<PermissionDefinition, PermissionBody>({\n      body,\n      path,\n      resourceType: ResourceType.permission,\n      resourceId: id,\n      options\n    });\n    const ref = new Permission(this.user, response.result.id, this.clientContext);\n    return new PermissionResponse(response.result, response.headers, response.code, ref);\n  }\n}\n"]}