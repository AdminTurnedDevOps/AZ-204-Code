{"version":3,"file":"Users.js","sourceRoot":"","sources":["../../../src/client/User/Users.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"./User\";\nimport { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\n\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\nexport class Users {\n  /**\n   * @hidden\n   * @param database The parent {@link Database}.\n   */\n  constructor(public readonly database: Database, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Query all users.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all users.\n   * @param query Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n\n    return new QueryIterator(this.clientContext, query, options, (innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: (result) => result.Users,\n        query,\n        options: innerOptions\n      });\n    });\n  }\n\n  /**\n   * Read all users.\n   * @param options\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinition & Resource> {\n    return this.query<UserDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition}.\n   * @param options\n   */\n  public async create(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    const response = await this.clientContext.create<UserDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    const ref = new User(this.database, response.result.id, this.clientContext);\n    return new UserResponse(response.result, response.headers, response.code, ref);\n  }\n\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body The specified {@link UserDefinition}.\n   * @param options\n   */\n  public async upsert(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n\n    const response = await this.clientContext.upsert<UserDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.user,\n      resourceId: id,\n      options\n    });\n    const ref = new User(this.database, response.result.id, this.clientContext);\n    return new UserResponse(response.result, response.headers, response.code, ref);\n  }\n}\n"]}