{"version":3,"file":"StoredProcedure.js","sourceRoot":"","sources":["../../../src/client/StoredProcedure/StoredProcedure.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createStoredProcedureUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType\n} from \"../../common\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { RequestOptions, ResourceResponse } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\n\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, upsert, read all, or query Stored Procedures,\n */\nexport class StoredProcedure {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container The parent {@link Container}.\n   * @param id The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   * @param options\n   */\n  public async read(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<StoredProcedureDefinition>({\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   * @param options\n   */\n  public async replace(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions\n  ): Promise<StoredProcedureResponse> {\n    if (body.body) {\n      body.body = body.body.toString();\n    }\n\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.replace<StoredProcedureDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Delete the given {@link StoredProcedure}.\n   * @param options\n   */\n  public async delete(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n\n    const response = await this.clientContext.delete<StoredProcedureDefinition>({\n      path,\n      resourceType: ResourceType.sproc,\n      resourceId: id,\n      options\n    });\n    return new StoredProcedureResponse(response.result, response.headers, response.code, this);\n  }\n\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey The partition key to use when executing the stored procedure\n   * @param params Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n  public async execute<T = any>(\n    partitionKey: any,\n    params?: any[],\n    options?: RequestOptions\n  ): Promise<ResourceResponse<T>> {\n    if (partitionKey === undefined) {\n      const {\n        resource: partitionKeyDefinition\n      } = await this.container.readPartitionKeyDefinition();\n      partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n    }\n    const response = await this.clientContext.execute<T>({\n      sprocLink: this.url,\n      params,\n      options,\n      partitionKey\n    });\n    return new ResourceResponse<T>(response.result, response.headers, response.code);\n  }\n}\n"]}