{"version":3,"file":"Database.js","sourceRoot":"","sources":["../../../src/client/Database/Database.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAG/F,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AACrD,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEtC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD;;;;;;;;;GASG;AACH,MAAM,OAAO,QAAQ;IA0BnB;;;OAGG;IACH,YACkB,MAAoB,EACpB,EAAU,EAClB,aAA4B;QAFpB,WAAM,GAAN,MAAM,CAAc;QACpB,OAAE,GAAF,EAAE,CAAQ;QAClB,kBAAa,GAAb,aAAa,CAAe;QAEpC,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACnD,CAAC;IAlBD;;OAEG;IACH,IAAW,GAAG;QACZ,OAAO,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAeD;;;;;;;;;OASG;IACI,SAAS,CAAC,EAAU;QACzB,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAC,EAAU;QACpB,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IAED,iDAAiD;IACpC,IAAI,CAAC,OAAwB;;YACxC,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAqB;gBACjE,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,QAAQ;gBACnC,UAAU,EAAE,EAAE;gBACd,OAAO;aACR,CAAC,CAAC;YACH,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;KAAA;IAED,iCAAiC;IACpB,MAAM,CAAC,OAAwB;;YAC1C,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAqB;gBACnE,IAAI;gBACJ,YAAY,EAAE,YAAY,CAAC,QAAQ;gBACnC,UAAU,EAAE,EAAE;gBACd,OAAO;aACR,CAAC,CAAC;YACH,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;KAAA;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { RequestOptions } from \"../../request\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\n\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Used for creating new containers, or querying/reading all containers.\n   *\n   * Use `.container(id)` to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * @example Create a new container\n   * ```typescript\n   * const {body: containerDefinition, container} = await client.database(\"<db id>\").containers.create({id: \"<container id>\"});\n   * ```\n   */\n  public readonly containers: Containers;\n  /**\n   * Used for creating new users, or querying/reading all users.\n   *\n   * Use `.user(id)` to read, replace, or delete a specific, existing {@link User} by id.\n   */\n  public readonly users: Users;\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url() {\n    return createDatabaseUri(this.id);\n  }\n\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private clientContext: ClientContext\n  ) {\n    this.containers = new Containers(this, this.clientContext);\n    this.users = new Users(this, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  public container(id: string): Container {\n    return new Container(this, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n  public user(id: string): User {\n    return new User(this, id, this.clientContext);\n  }\n\n  /** Read the definition of the given Database. */\n  public async read(options?: RequestOptions): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options\n    });\n    return new DatabaseResponse(response.result, response.headers, response.code, this);\n  }\n\n  /** Delete the given Database. */\n  public async delete(options?: RequestOptions): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.delete<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options\n    });\n    return new DatabaseResponse(response.result, response.headers, response.code, this);\n  }\n}\n"]}