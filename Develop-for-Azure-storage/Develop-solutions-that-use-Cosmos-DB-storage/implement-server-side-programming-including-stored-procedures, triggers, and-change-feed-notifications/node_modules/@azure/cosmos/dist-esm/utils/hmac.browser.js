import { __awaiter } from "tslib";
import { encodeUTF8, encodeBase64 } from "./encode";
import atob from "./atob";
const globalThis = typeof self === "undefined" ? window : self;
export function hmac(key, message) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!globalThis || !globalThis.crypto || !globalThis.crypto.subtle) {
            throw new Error("Browser does not support cryptography functions");
        }
        const importParams = { name: "HMAC", hash: { name: "SHA-256" } };
        const encodedMessage = new Uint8Array([...unescape(encodeURIComponent(message))].map((c) => c.charCodeAt(0)));
        const encodedKey = encodeUTF8(atob(key));
        const cryptoKey = yield globalThis.crypto.subtle.importKey("raw", encodedKey, importParams, false, ["sign"]);
        const signature = yield globalThis.crypto.subtle.sign(importParams, cryptoKey, encodedMessage);
        return encodeBase64(signature);
    });
}
//# sourceMappingURL=hmac.browser.js.map