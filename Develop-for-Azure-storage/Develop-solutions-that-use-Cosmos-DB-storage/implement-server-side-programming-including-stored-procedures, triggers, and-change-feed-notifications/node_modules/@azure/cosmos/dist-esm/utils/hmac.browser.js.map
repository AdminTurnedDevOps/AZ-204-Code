{"version":3,"file":"hmac.browser.js","sourceRoot":"","sources":["../../src/utils/hmac.browser.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AACpD,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,MAAM,UAAU,GAAG,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;AAE/D,MAAM,UAAgB,IAAI,CAAC,GAAW,EAAE,OAAe;;QACrD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE;YAClE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACpE;QACD,MAAM,YAAY,GAAqB,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,CAAC;QACnF,MAAM,cAAc,GAAG,IAAI,UAAU,CACnC,CAAC,GAAG,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CACxD,KAAK,EACL,UAAU,EACV,YAAY,EACZ,KAAK,EACL,CAAC,MAAM,CAAC,CACT,CAAC;QACF,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;QAE/F,OAAO,YAAY,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;CAAA","sourcesContent":["import { encodeUTF8, encodeBase64 } from \"./encode\";\nimport atob from \"./atob\";\n\nconst globalThis = typeof self === \"undefined\" ? window : self;\n\nexport async function hmac(key: string, message: string) {\n  if (!globalThis || !globalThis.crypto || !globalThis.crypto.subtle) {\n    throw new Error(\"Browser does not support cryptography functions\");\n  }\n  const importParams: HmacImportParams = { name: \"HMAC\", hash: { name: \"SHA-256\" } };\n  const encodedMessage = new Uint8Array(\n    [...unescape(encodeURIComponent(message))].map((c) => c.charCodeAt(0))\n  );\n  const encodedKey = encodeUTF8(atob(key));\n  const cryptoKey = await globalThis.crypto.subtle.importKey(\n    \"raw\",\n    encodedKey,\n    importParams,\n    false,\n    [\"sign\"]\n  );\n  const signature = await globalThis.crypto.subtle.sign(importParams, cryptoKey, encodedMessage);\n\n  return encodeBase64(signature);\n}\n"]}