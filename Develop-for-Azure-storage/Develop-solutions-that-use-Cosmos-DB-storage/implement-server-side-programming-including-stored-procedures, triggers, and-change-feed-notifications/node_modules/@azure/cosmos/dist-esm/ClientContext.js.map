{"version":3,"file":"ClientContext.js","sourceRoot":"","sources":["../src/ClientContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport uuid from \"uuid/v4\";\nimport { PartitionKeyRange } from \"./client/Container/PartitionKeyRange\";\nimport { Resource } from \"./client/Resource\";\nimport { Constants, HTTPMethod, OperationType, ResourceType } from \"./common/constants\";\nimport { getIdFromLink, getPathFromLink, parseLink } from \"./common/helper\";\nimport { logger } from \"./common/logger\";\nimport { StatusCodes, SubStatusCodes } from \"./common/statusCodes\";\nimport { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport { ConnectionPolicy, ConsistencyLevel, DatabaseAccount, PartitionKey } from \"./documents\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport { executePlugins, PluginOn } from \"./plugins/Plugin\";\nimport { FetchFunctionCallback, SqlQuerySpec } from \"./queryExecutionContext\";\nimport { CosmosHeaders } from \"./queryExecutionContext/CosmosHeaders\";\nimport { QueryIterator } from \"./queryIterator\";\nimport { ErrorResponse } from \"./request\";\nimport { FeedOptions, RequestOptions, Response } from \"./request\";\nimport { PartitionedQueryExecutionInfo } from \"./request/ErrorResponse\";\nimport { getHeaders } from \"./request/request\";\nimport { RequestContext } from \"./request/RequestContext\";\nimport { request as executeRequest } from \"./request/RequestHandler\";\nimport { SessionContainer } from \"./session/sessionContainer\";\nimport { SessionContext } from \"./session/SessionContext\";\n\n/** @hidden */\nconst log = logger(\"ClientContext\");\n\nconst QueryJsonContentType = \"application/query+json\";\n\n/**\n * @hidden\n * @ignore\n */\nexport class ClientContext {\n  private readonly sessionContainer: SessionContainer;\n  private connectionPolicy: ConnectionPolicy;\n\n  public partitionKeyDefinitionCache: { [containerUrl: string]: any }; // TODO: ParitionKeyDefinitionCache\n  public constructor(\n    private cosmosClientOptions: CosmosClientOptions,\n    private globalEndpointManager: GlobalEndpointManager\n  ) {\n    this.connectionPolicy = cosmosClientOptions.connectionPolicy;\n    this.sessionContainer = new SessionContainer();\n    this.partitionKeyDefinitionCache = {};\n  }\n  /** @ignore */\n  public async read<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        globalEndpointManager: this.globalEndpointManager,\n        requestAgent: this.cosmosClientOptions.agent,\n        connectionPolicy: this.connectionPolicy,\n        method: HTTPMethod.get,\n        path,\n        operationType: OperationType.Read,\n        client: this,\n        resourceId,\n        options,\n        resourceType,\n        plugins: this.cosmosClientOptions.plugins,\n        partitionKey\n      };\n\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // read will use ReadEndpoint since it uses GET operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(request, executeRequest, PluginOn.operation);\n      this.captureSessionToken(undefined, path, OperationType.Read, response.headers);\n      return response;\n    } catch (err) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async queryFeed<T>({\n    path,\n    resourceType,\n    resourceId,\n    resultFn,\n    query,\n    options,\n    partitionKeyRangeId,\n    partitionKey\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    resultFn: (result: { [key: string]: any }) => any[];\n    query: SqlQuerySpec | string;\n    options: FeedOptions;\n    partitionKeyRangeId?: string;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & Resource>> {\n    // Query operations will use ReadEndpoint even though it uses\n    // GET(for queryFeed) and POST(for regular query operations)\n\n    const request: RequestContext = {\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      method: HTTPMethod.get,\n      path,\n      operationType: OperationType.Query,\n      client: this,\n      partitionKeyRangeId,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n      plugins: this.cosmosClientOptions.plugins,\n      partitionKey\n    };\n    const requestId = uuid();\n    if (query !== undefined) {\n      request.method = HTTPMethod.post;\n    }\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      request.resourceType,\n      request.operationType\n    );\n    request.headers = await this.buildHeaders(request);\n    if (query !== undefined) {\n      request.headers[Constants.HttpHeaders.IsQuery] = \"true\";\n      request.headers[Constants.HttpHeaders.ContentType] = QueryJsonContentType;\n      if (typeof query === \"string\") {\n        request.body = { query }; // Converts query text to query object.\n      }\n    }\n    this.applySessionToken(request);\n    log.info(\n      \"query \" +\n        requestId +\n        \" started\" +\n        (request.partitionKeyRangeId ? \" pkrid: \" + request.partitionKeyRangeId : \"\")\n    );\n    log.silly(request);\n    const start = Date.now();\n    const response = await executeRequest(request);\n    log.info(\"query \" + requestId + \" finished - \" + (Date.now() - start) + \"ms\");\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return this.processQueryFeedResponse(response, !!query, resultFn);\n  }\n\n  public async getQueryPlan(\n    path: string,\n    resourceType: ResourceType,\n    resourceId: string,\n    query: SqlQuerySpec | string,\n    options: FeedOptions = {}\n  ): Promise<Response<PartitionedQueryExecutionInfo>> {\n    const request: RequestContext = {\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      method: HTTPMethod.post,\n      path,\n      operationType: OperationType.Read,\n      client: this,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n      plugins: this.cosmosClientOptions.plugins\n    };\n\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      request.resourceType,\n      request.operationType\n    );\n    request.headers = await this.buildHeaders(request);\n    request.headers[Constants.HttpHeaders.IsQueryPlan] = \"True\";\n    request.headers[Constants.HttpHeaders.QueryVersion] = \"1.4\";\n    request.headers[Constants.HttpHeaders.SupportedQueryFeatures] =\n      \"NonValueAggregate, Aggregate, Distinct, MultipleOrderBy, OffsetAndLimit, OrderBy, Top, CompositeAggregate, GroupBy, MultipleAggregates\";\n    request.headers[Constants.HttpHeaders.ContentType] = QueryJsonContentType;\n    if (typeof query === \"string\") {\n      request.body = { query }; // Converts query text to query object.\n    }\n\n    this.applySessionToken(request);\n    const response = await executeRequest(request);\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return response as any;\n  }\n\n  public queryPartitionKeyRanges(\n    collectionLink: string,\n    query?: string | SqlQuerySpec,\n    options?: FeedOptions\n  ) {\n    const path = getPathFromLink(collectionLink, ResourceType.pkranges);\n    const id = getIdFromLink(collectionLink);\n    const cb: FetchFunctionCallback = (innerOptions) => {\n      return this.queryFeed({\n        path,\n        resourceType: ResourceType.pkranges,\n        resourceId: id,\n        resultFn: (result) => result.PartitionKeyRanges,\n        query,\n        options: innerOptions\n      });\n    };\n    return new QueryIterator<PartitionKeyRange>(this, query, options, cb);\n  }\n\n  public async delete<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        globalEndpointManager: this.globalEndpointManager,\n        requestAgent: this.cosmosClientOptions.agent,\n        connectionPolicy: this.connectionPolicy,\n        method: HTTPMethod.delete,\n        client: this,\n        operationType: OperationType.Delete,\n        path,\n        resourceType,\n        options,\n        resourceId,\n        plugins: this.cosmosClientOptions.plugins,\n        partitionKey\n      };\n\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n      // deleteResource will use WriteEndpoint since it uses DELETE operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(request, executeRequest, PluginOn.operation);\n      if (parseLink(path).type !== \"colls\") {\n        this.captureSessionToken(undefined, path, OperationType.Delete, response.headers);\n      } else {\n        this.clearSessionToken(path);\n      }\n      return response;\n    } catch (err) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async create<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        globalEndpointManager: this.globalEndpointManager,\n        requestAgent: this.cosmosClientOptions.agent,\n        connectionPolicy: this.connectionPolicy,\n        method: HTTPMethod.post,\n        client: this,\n        operationType: OperationType.Create,\n        path,\n        resourceType,\n        resourceId,\n        body,\n        options,\n        plugins: this.cosmosClientOptions.plugins,\n        partitionKey\n      };\n\n      request.headers = await this.buildHeaders(request);\n      // create will use WriteEndpoint since it uses POST operation\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(request, executeRequest, PluginOn.operation);\n      this.captureSessionToken(undefined, path, OperationType.Create, response.headers);\n      return response;\n    } catch (err) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private processQueryFeedResponse(\n    res: Response<any>,\n    isQuery: boolean,\n    resultFn: (result: { [key: string]: any }) => any[]\n  ): Response<any> {\n    if (isQuery) {\n      return { result: resultFn(res.result), headers: res.headers, code: res.code };\n    } else {\n      const newResult = resultFn(res.result).map((body: any) => body);\n      return { result: newResult, headers: res.headers, code: res.code };\n    }\n  }\n\n  private applySessionToken(requestContext: RequestContext) {\n    const request = this.getSessionParams(requestContext.path);\n\n    if (requestContext.headers && requestContext.headers[Constants.HttpHeaders.SessionToken]) {\n      return;\n    }\n\n    const sessionConsistency: ConsistencyLevel = requestContext.headers[\n      Constants.HttpHeaders.ConsistencyLevel\n    ] as ConsistencyLevel;\n    if (!sessionConsistency) {\n      return;\n    }\n\n    if (sessionConsistency !== ConsistencyLevel.Session) {\n      return;\n    }\n\n    if (request.resourceAddress) {\n      const sessionToken = this.sessionContainer.get(request);\n      if (sessionToken) {\n        requestContext.headers[Constants.HttpHeaders.SessionToken] = sessionToken;\n      }\n    }\n  }\n\n  public async replace<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        globalEndpointManager: this.globalEndpointManager,\n        requestAgent: this.cosmosClientOptions.agent,\n        connectionPolicy: this.connectionPolicy,\n        method: HTTPMethod.put,\n        client: this,\n        operationType: OperationType.Replace,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        plugins: this.cosmosClientOptions.plugins,\n        partitionKey\n      };\n\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // replace will use WriteEndpoint since it uses PUT operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(request, executeRequest, PluginOn.operation);\n      this.captureSessionToken(undefined, path, OperationType.Replace, response.headers);\n      return response;\n    } catch (err) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async upsert<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        globalEndpointManager: this.globalEndpointManager,\n        requestAgent: this.cosmosClientOptions.agent,\n        connectionPolicy: this.connectionPolicy,\n        method: HTTPMethod.post,\n        client: this,\n        operationType: OperationType.Upsert,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        plugins: this.cosmosClientOptions.plugins,\n        partitionKey\n      };\n\n      request.headers = await this.buildHeaders(request);\n      request.headers[Constants.HttpHeaders.IsUpsert] = true;\n      this.applySessionToken(request);\n\n      // upsert will use WriteEndpoint since it uses POST operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(request, executeRequest, PluginOn.operation);\n      this.captureSessionToken(undefined, path, OperationType.Upsert, response.headers);\n      return response;\n    } catch (err) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async execute<T>({\n    sprocLink,\n    params,\n    options = {},\n    partitionKey\n  }: {\n    sprocLink: string;\n    params?: any[];\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T>> {\n    // Accept a single parameter or an array of parameters.\n    // Didn't add type annotation for this because we should legacy this behavior\n    if (params !== null && params !== undefined && !Array.isArray(params)) {\n      params = [params];\n    }\n    const path = getPathFromLink(sprocLink);\n    const id = getIdFromLink(sprocLink);\n\n    const request: RequestContext = {\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      method: HTTPMethod.post,\n      client: this,\n      operationType: OperationType.Execute,\n      path,\n      resourceType: ResourceType.sproc,\n      options,\n      resourceId: id,\n      body: params,\n      plugins: this.cosmosClientOptions.plugins,\n      partitionKey\n    };\n\n    request.headers = await this.buildHeaders(request);\n    // executeStoredProcedure will use WriteEndpoint since it uses POST operation\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      request.resourceType,\n      request.operationType\n    );\n    return executePlugins(request, executeRequest, PluginOn.operation);\n  }\n\n  /**\n   * Gets the Database account information.\n   * @param {string} [options.urlConnection]   - The endpoint url whose database account needs to be retrieved. \\\n   * If not present, current client's url will be used.\n   */\n  public async getDatabaseAccount(\n    options: RequestOptions = {}\n  ): Promise<Response<DatabaseAccount>> {\n    const endpoint = options.urlConnection || this.cosmosClientOptions.endpoint;\n    const request: RequestContext = {\n      endpoint,\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      method: HTTPMethod.get,\n      client: this,\n      operationType: OperationType.Read,\n      path: \"\",\n      resourceType: ResourceType.none,\n      options,\n      plugins: this.cosmosClientOptions.plugins\n    };\n\n    request.headers = await this.buildHeaders(request);\n    // await options.beforeOperation({ endpoint, request, headers: requestHeaders });\n    const { result, headers } = await executePlugins(request, executeRequest, PluginOn.operation);\n\n    const databaseAccount = new DatabaseAccount(result, headers);\n\n    return { result: databaseAccount, headers };\n  }\n\n  public getWriteEndpoint(): Promise<string> {\n    return this.globalEndpointManager.getWriteEndpoint();\n  }\n\n  public getReadEndpoint(): Promise<string> {\n    return this.globalEndpointManager.getReadEndpoint();\n  }\n\n  private captureSessionToken(\n    err: ErrorResponse,\n    path: string,\n    operationType: OperationType,\n    resHeaders: CosmosHeaders\n  ) {\n    const request = this.getSessionParams(path);\n    request.operationType = operationType;\n    if (\n      !err ||\n      (!this.isMasterResource(request.resourceType) &&\n        (err.code === StatusCodes.PreconditionFailed ||\n          err.code === StatusCodes.Conflict ||\n          (err.code === StatusCodes.NotFound &&\n            err.substatus !== SubStatusCodes.ReadSessionNotAvailable)))\n    ) {\n      this.sessionContainer.set(request, resHeaders);\n    }\n  }\n\n  public clearSessionToken(path: string) {\n    const request = this.getSessionParams(path);\n    this.sessionContainer.remove(request);\n  }\n\n  private getSessionParams(resourceLink: string): SessionContext {\n    const resourceId: string = null;\n    let resourceAddress: string = null;\n    const parserOutput = parseLink(resourceLink);\n\n    resourceAddress = parserOutput.objectBody.self;\n\n    const resourceType = parserOutput.type;\n    return {\n      resourceId,\n      resourceAddress,\n      resourceType,\n      isNameBased: true\n    };\n  }\n\n  private isMasterResource(resourceType: string): boolean {\n    if (\n      resourceType === Constants.Path.OffersPathSegment ||\n      resourceType === Constants.Path.DatabasesPathSegment ||\n      resourceType === Constants.Path.UsersPathSegment ||\n      resourceType === Constants.Path.PermissionsPathSegment ||\n      resourceType === Constants.Path.TopologyPathSegment ||\n      resourceType === Constants.Path.DatabaseAccountPathSegment ||\n      resourceType === Constants.Path.PartitionKeyRangesPathSegment ||\n      resourceType === Constants.Path.CollectionsPathSegment\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private buildHeaders(requestContext: RequestContext) {\n    return getHeaders({\n      clientOptions: this.cosmosClientOptions,\n      defaultHeaders: {\n        ...this.cosmosClientOptions.defaultHeaders,\n        ...requestContext.options.initialHeaders\n      },\n      verb: requestContext.method,\n      path: requestContext.path,\n      resourceId: requestContext.resourceId,\n      resourceType: requestContext.resourceType,\n      options: requestContext.options,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n      useMultipleWriteLocations: this.connectionPolicy.useMultipleWriteLocations,\n      partitionKey: requestContext.partitionKey\n    });\n  }\n}\n"]}