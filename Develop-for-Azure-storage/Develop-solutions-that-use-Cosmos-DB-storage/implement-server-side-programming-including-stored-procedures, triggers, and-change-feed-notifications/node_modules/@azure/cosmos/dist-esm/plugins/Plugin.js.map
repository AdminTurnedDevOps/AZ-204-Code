{"version":3,"file":"Plugin.js","sourceRoot":"","sources":["../../src/plugins/Plugin.ts"],"names":[],"mappings":";AAKA;;;;GAIG;AACH,MAAM,CAAN,IAAY,QASX;AATD,WAAY,QAAQ;IAClB;;OAEG;IACH,+BAAmB,CAAA;IACnB;;OAEG;IACH,mCAAuB,CAAA;AACzB,CAAC,EATW,QAAQ,KAAR,QAAQ,QASnB;AAwCD;;;;;;;GAOG;AACH,MAAM,UAAgB,cAAc,CAClC,cAA8B,EAC9B,IAAiB,EACjB,EAAY;;QAEZ,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAC3B,OAAO,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;SACxC;QACD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,CAAC,GAAc,CAAC,KAAqB,EAA0B,EAAE;YACrE,IAAI,EAAE,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;gBACnC,OAAO,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;aACxC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;gBACzC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC;aAC1B;iBAAM;gBACL,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC;QACF,IAAI,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;YAC3C,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC;SAC1B;aAAM;YACL,OAAO,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;SAChE;IACH,CAAC;CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { RequestContext } from \"../request/RequestContext\";\nimport { Response } from \"../request/Response\";\n\n/**\n * Used to specify which type of events to execute this plug in on.\n *\n * @ignore\n */\nexport enum PluginOn {\n  /**\n   * Will be executed per network request\n   */\n  request = \"request\",\n  /**\n   * Will be executed per API operation\n   */\n  operation = \"operation\"\n}\n\n/**\n * Specifies which event to run for the specified plugin\n *\n * @ignore\n */\nexport interface PluginConfig {\n  /**\n   * The event to run the plugin on\n   */\n  on: keyof typeof PluginOn;\n  /**\n   * The plugin to run\n   */\n  plugin: Plugin<any>;\n}\n\n/**\n * Plugins allow you to customize the behavior of the SDk with additional logging, retry, or additional functionality.\n *\n * A plugin is a function which returns a Promise<Response<T>>, and is passed a RequestContext and Next object.\n *\n * Next is a function which takes in requestContext returns a promise. You must await/then that promise which will contain the response from further plugins,\n * allowing you to log those results or handle errors.\n *\n * RequestContext is an object which controls what operation is happening, against which endpoint, and more. Modifying this and passing it along via next is how\n * you modify future SDK behavior.\n *\n * @ignore\n */\nexport type Plugin<T> = (context: RequestContext, next: Next<T>) => Promise<Response<T>>;\n\n/**\n * Next is a function which takes in requestContext returns a promise. You must await/then that promise which will contain the response from further plugins,\n * allowing you to log those results or handle errors.\n * @ignore\n */\nexport type Next<T> = (context: RequestContext) => Promise<Response<T>>;\n\n/**\n * @internal\n * @hidden\n * @ignore\n * @param requestContext\n * @param next\n * @param on\n */\nexport async function executePlugins(\n  requestContext: RequestContext,\n  next: Plugin<any>,\n  on: PluginOn\n): Promise<Response<any>> {\n  if (!requestContext.plugins) {\n    return next(requestContext, undefined);\n  }\n  let level = 0;\n  const _: Next<any> = (inner: RequestContext): Promise<Response<any>> => {\n    if (++level >= inner.plugins.length) {\n      return next(requestContext, undefined);\n    } else if (inner.plugins[level].on !== on) {\n      return _(requestContext);\n    } else {\n      return inner.plugins[level].plugin(inner, _);\n    }\n  };\n  if (requestContext.plugins[level].on !== on) {\n    return _(requestContext);\n  } else {\n    return requestContext.plugins[level].plugin(requestContext, _);\n  }\n}\n"]}