import { __awaiter } from "tslib";
/**
 * Used to specify which type of events to execute this plug in on.
 *
 * @ignore
 */
export var PluginOn;
(function (PluginOn) {
    /**
     * Will be executed per network request
     */
    PluginOn["request"] = "request";
    /**
     * Will be executed per API operation
     */
    PluginOn["operation"] = "operation";
})(PluginOn || (PluginOn = {}));
/**
 * @internal
 * @hidden
 * @ignore
 * @param requestContext
 * @param next
 * @param on
 */
export function executePlugins(requestContext, next, on) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!requestContext.plugins) {
            return next(requestContext, undefined);
        }
        let level = 0;
        const _ = (inner) => {
            if (++level >= inner.plugins.length) {
                return next(requestContext, undefined);
            }
            else if (inner.plugins[level].on !== on) {
                return _(requestContext);
            }
            else {
                return inner.plugins[level].plugin(inner, _);
            }
        };
        if (requestContext.plugins[level].on !== on) {
            return _(requestContext);
        }
        else {
            return requestContext.plugins[level].plugin(requestContext, _);
        }
    });
}
//# sourceMappingURL=Plugin.js.map