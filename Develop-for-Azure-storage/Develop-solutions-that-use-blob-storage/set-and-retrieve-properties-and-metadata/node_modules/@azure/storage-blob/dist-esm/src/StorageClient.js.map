{"version":3,"file":"StorageClient.js","sourceRoot":"","sources":["../../src/StorageClient.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAE5E,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,EAAE,qBAAqB,EAAE,MAAM,sBAAsB,CAAC;AAClG,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAAE,0BAA0B,EAAE,MAAM,0CAA0C,CAAC;AACtF,OAAO,EAAmB,iBAAiB,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAa9E;;;;;;GAMG;AACH;IAyCE;;;;;OAKG;IACH,uBAAsB,GAAW,EAAE,QAAkB;QACnD,iFAAiF;QACjF,IAAI,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAClD,IAAI,CAAC,GAAG,EACR,QAAQ,CAAC,sBAAsB,EAAE,CAClC,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC5C,KAAsB,UAAuB,EAAvB,KAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAvB,cAAuB,EAAvB,IAAuB,EAAE;YAA1C,IAAM,OAAO,SAAA;YAChB,IACE,CAAC,MAAM,IAAI,OAAO,YAAY,0BAA0B,CAAC;gBACzD,OAAO,YAAY,mBAAmB;gBACtC,iBAAiB,CAAC,OAAO,CAAC,EAC1B;gBACA,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;aAC3B;SACF;QAED,iDAAiD;QACjD,IAAM,oBAAoB,GAAG,IAAI,CAAC,oBAA2B,CAAC;QAC9D,oBAAoB,CAAC,kBAAkB,GAAG,SAAS,CAAC;IACtD,CAAC;IACH,oBAAC;AAAD,CAAC,AA1ED,IA0EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { Pipeline } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { TokenCredential, isTokenCredential, isNode } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n *\n * @export\n * @class StorageClient\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   *\n   * @type {string}\n   * @memberof StorageClient\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   * @ignore\n   * @type {Pipeline}\n   * @memberof StorageClient\n   */\n  protected readonly pipeline: Pipeline;\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   *\n   * @type {StorageSharedKeyCredential | AnonymousCredential | TokenCredential}\n   * @memberof StorageClient\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   *\n   * @protected\n   * @type {StorageClientContext}\n   * @memberof StorageClient\n   */\n  protected readonly storageClientContext: StorageClientContext;\n  /**\n   * @protected\n   * @type {boolean}\n   * @memberof StorageClient\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param {string} url url to resource\n   * @param {Pipeline} pipeline request policy pipeline.\n   * @memberof StorageClient\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential ||\n        isTokenCredential(factory)\n      ) {\n        this.credential = factory;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n"]}