{"version":3,"file":"BlobSASSignatureValues.js","sourceRoot":"","sources":["../../src/BlobSASSignatureValues.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BlobSASPermissions } from \"./BlobSASPermissions\";\nimport { ContainerSASPermissions } from \"./ContainerSASPermissions\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol } from \"./SASQueryParameters\";\nimport { SASQueryParameters } from \"./SASQueryParameters\";\nimport { UserDelegationKeyCredential } from \"./credentials/UserDelegationKeyCredential\";\nimport { UserDelegationKey } from \"./BlobServiceClient\";\nimport { SERVICE_VERSION } from \"./utils/constants\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobSASSignatureValues is used to help generating Blob service SAS tokens for containers or blobs.\n *\n * @export\n * @class BlobSASSignatureValues\n */\nexport interface BlobSASSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   *\n   * @type {SASProtocol}\n   * @memberof BlobSASSignatureValues\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   *\n   * @type {Date}\n   * @memberof BlobSASSignatureValues\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   *\n   * @type {Date}\n   * @memberof BlobSASSignatureValues\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to either {@link ContainerSASPermissions} or {@link BlobSASPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   *\n   * @type {BlobSASPermissions}\n   * @memberof BlobSASSignatureValues\n   */\n  permissions?: BlobSASPermissions;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   *\n   * @type {SasIPRange}\n   * @memberof BlobSASSignatureValues\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The name of the container the SAS user may access.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  containerName: string;\n\n  /**\n   * Optional. The blob name of the SAS user may access. Required if snapshotTime is provided.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  blobName?: string;\n\n  /**\n   * Optional. Snapshot timestamp string the SAS user may access. Only supported from API version 2018-11-09.\n   *\n   * @type {string}\n   * @memberof IBlobSASSignatureValues\n   */\n  snapshotTime?: string;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  identifier?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   *\n   * @type {string}\n   * @memberof BlobSASSignatureValues\n   */\n  contentType?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * Fill in the required details before running the following snippets.\n *\n * Example usage:\n *\n * ```js\n * // Generate service level SAS for a container\n * const containerSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn: new Date(), // Required\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Optional. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * Example using an identifier:\n *\n * ```js\n * // Generate service level SAS for a container with identifier\n * // startsOn & permissions are optional when identifier is provided\n * const identifier = \"unique-id\";\n * await containerClient.setAccessPolicy(undefined, [\n *   {\n *     accessPolicy: {\n *       expiresOn: new Date(new Date().valueOf() + 86400), // Date type\n *       permissions: ContainerSASPermissions.parse(\"racwdl\").toString(),\n *       startsOn: new Date() // Date type\n *     },\n *     id: identifier\n *   }\n * ]);\n *\n * const containerSAS = generateBlobSASQueryParameters(\n *   {\n *     containerName, // Required\n *     identifier // Required\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * Example using a blob name:\n *\n * ```js\n * // Generate service level SAS for a blob\n * const blobSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     blobName, // Required\n *     permissions: BlobSASPermissions.parse(\"racwd\"), // Required\n *     startsOn: new Date(), // Required\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Optional. Date type\n *     cacheControl: \"cache-control-override\", // Optional\n *     contentDisposition: \"content-disposition-override\", // Optional\n *     contentEncoding: \"content-encoding-override\", // Optional\n *     contentLanguage: \"content-language-override\", // Optional\n *     contentType: \"content-type-override\", // Optional\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * @export\n * @param {BlobSASSignatureValues} blobSASSignatureValues\n * @param {StorageSharedKeyCredential} sharedKeyCredential\n * @returns {SASQueryParameters}\n */\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters;\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n * WARNING: identifier will be ignored when generating user delegation SAS, permissions and expiresOn are required.\n *\n * Example usage:\n *\n * ```js\n * // Generate user delegation SAS for a container\n * const userDelegationKey = await blobServiceClient.getUserDelegationKey(startsOn, expiresOn);\n * const containerSAS = generateBlobSASQueryParameters({\n *     containerName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn, // Required. Date type\n *     expiresOn, // Optional. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2018-11-09\" // Must >= 2018-11-09 to generate user delegation SAS\n *   },\n *   userDelegationKey, // UserDelegationKey\n *   accountName\n * ).toString();\n * ```\n *\n * @export\n * @param {BlobSASSignatureValues} blobSASSignatureValues\n * @param {UserDelegationKey} userDelegationKey Return value of `blobServiceClient.getUserDelegationKey()`\n * @param {string} accountName\n * @returns {SASQueryParameters}\n */\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKey: UserDelegationKey,\n  accountName: string\n): SASQueryParameters;\n\nexport function generateBlobSASQueryParameters(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredentialOrUserDelegationKey: StorageSharedKeyCredential | UserDelegationKey,\n  accountName?: string\n): SASQueryParameters {\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n\n  const sharedKeyCredential =\n    sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n      ? sharedKeyCredentialOrUserDelegationKey\n      : undefined;\n  let userDelegationKeyCredential: UserDelegationKeyCredential | undefined;\n\n  if (sharedKeyCredential === undefined && accountName !== undefined) {\n    userDelegationKeyCredential = new UserDelegationKeyCredential(\n      accountName,\n      sharedKeyCredentialOrUserDelegationKey as UserDelegationKey\n    );\n  }\n\n  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n    throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n  }\n\n  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n  if (version >= \"2018-11-09\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      return generateBlobSASQueryParametersUDK20181109(\n        blobSASSignatureValues,\n        userDelegationKeyCredential!\n      );\n    }\n  }\n\n  if (version >= \"2015-04-05\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n    } else {\n      throw new RangeError(\n        \"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\"\n      );\n    }\n  }\n\n  throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param {BlobSASSignatureValues} blobSASSignatureValues\n * @param {StorageSharedKeyCredential} sharedKeyCredential\n * @returns {SASQueryParameters}\n */\nfunction generateBlobSASQueryParameters20150405(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !blobSASSignatureValues.identifier &&\n    !blobSASSignatureValues.permissions && !blobSASSignatureValues.expiresOn\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  let resource: string = \"c\";\n  let verifiedPermissions: string | undefined;\n\n  if (blobSASSignatureValues.snapshotTime) {\n    throw RangeError(\"'version' must be >= '2018-11-09' when provided 'snapshotTime'.\");\n  }\n\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    version,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\"\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param {BlobSASSignatureValues} blobSASSignatureValues\n * @param {StorageSharedKeyCredential} sharedKeyCredential\n * @returns {SASQueryParameters}\n */\nfunction generateBlobSASQueryParameters20181109(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !blobSASSignatureValues.identifier &&\n    !blobSASSignatureValues.permissions && !blobSASSignatureValues.expiresOn\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  let resource: string = \"c\";\n  let verifiedPermissions: string | undefined;\n\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n    throw RangeError(\"Must provide 'blobName' when provided 'snapshotTime'.\");\n  }\n\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    blobSASSignatureValues.identifier,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    blobSASSignatureValues.snapshotTime,\n    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\"\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param {BlobSASSignatureValues} blobSASSignatureValues\n * @param {UserDelegationKeyCredential} userDelegationKeyCredential\n * @returns {SASQueryParameters}\n */\nfunction generateBlobSASQueryParametersUDK20181109(\n  blobSASSignatureValues: BlobSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;\n  let resource: string = \"c\";\n  let verifiedPermissions: string | undefined;\n\n  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n    throw RangeError(\"Must provide 'blobName' when provided 'snapshotTime'.\");\n  }\n\n  if (blobSASSignatureValues.blobName) {\n    resource = \"b\";\n    if (blobSASSignatureValues.snapshotTime) {\n      resource = \"bs\";\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  if (blobSASSignatureValues.permissions) {\n    if (blobSASSignatureValues.blobName) {\n      verifiedPermissions = BlobSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = ContainerSASPermissions.parse(\n        blobSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    blobSASSignatureValues.startsOn\n      ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false)\n      : \"\",\n    blobSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      blobSASSignatureValues.containerName,\n      blobSASSignatureValues.blobName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : \"\",\n    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    blobSASSignatureValues.snapshotTime,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    blobSASSignatureValues.protocol,\n    blobSASSignatureValues.startsOn,\n    blobSASSignatureValues.expiresOn,\n    blobSASSignatureValues.ipRange,\n    blobSASSignatureValues.identifier,\n    resource,\n    blobSASSignatureValues.cacheControl,\n    blobSASSignatureValues.contentDisposition,\n    blobSASSignatureValues.contentEncoding,\n    blobSASSignatureValues.contentLanguage,\n    blobSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey\n  );\n}\n\nfunction getCanonicalName(accountName: string, containerName: string, blobName?: string): string {\n  // Container: \"/blob/account/containerName\"\n  // Blob:      \"/blob/account/containerName/blobName\"\n  const elements: string[] = [`/blob/${accountName}/${containerName}`];\n  if (blobName) {\n    elements.push(`/${blobName}`);\n  }\n  return elements.join(\"\");\n}\n"]}