{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAUlC,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AA+B7D;;;GAGG;AACH,MAAM,CAAN,IAAY,aAcX;AAdD,WAAY,aAAa;IACvB;;OAEG;IACH,4BAAW,CAAA;IACX;;OAEG;IACH,8BAAa,CAAA;IACb;;;OAGG;IACH,oCAAmB,CAAA;AACrB,CAAC,EAdW,aAAa,KAAb,aAAa,QAcxB;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,mBA6CX;AA7CD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,gCAAS,CAAA;IACT;;OAEG;IACH,gCAAS,CAAA;IACT;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;IACX;;OAEG;IACH,kCAAW,CAAA;AACb,CAAC,EA7CW,mBAAmB,KAAnB,mBAAmB,QA6C9B;AAED,MAAM,UAAU,YAAY,CAC1B,IAA8D;IAE9D,IAAI,IAAI,IAAI,SAAS,EAAE;QACrB,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,IAAkB,CAAC,CAAC,qGAAqG;AAClI,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,GAAwB,EAAE,OAAgB;IAC7E,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE;QACnB,MAAM,IAAI,UAAU,CAAC,2DAA2D,CAAC,CAAC;KACnF;IAED,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE;QACnC,GAAG,CAAC,mBAAmB,GAAG,wBAAwB,CAAC;KACpD;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  ModifiedAccessConditions,\n  LeaseAccessConditions,\n  SequenceNumberAccessConditions,\n  AppendPositionAccessConditions,\n  AccessTier,\n  CpkInfo\n} from \"./generatedModels\";\nimport { EncryptionAlgorithmAES25 } from \"./utils/constants\";\n\n/**\n * A map of name-value pairs to associate with the resource.\n */\nexport interface Metadata {\n  /**\n   * A name-value pair.\n   */\n  [propertyName: string]: string;\n}\n\n/**\n * Conditions to add to the creation of this blob.\n */\nexport interface BlobRequestConditions extends ModifiedAccessConditions, LeaseAccessConditions {}\n\n/**\n * Conditions to add to the creation of this page blob.\n */\nexport interface PageBlobRequestConditions\n  extends BlobRequestConditions,\n    SequenceNumberAccessConditions {}\n\n/**\n * Conditions to add to the creation of this append blob.\n */\nexport interface AppendBlobRequestConditions\n  extends BlobRequestConditions,\n    AppendPositionAccessConditions {}\n\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nexport enum BlockBlobTier {\n  /**\n   * Optmized for storing data that is accessed frequently.\n   */\n  Hot = \"Hot\",\n  /**\n   * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n   */\n  Cool = \"Cool\",\n  /**\n   * Optimized for storing data that is rarely accessed and stored for at least 180 days\n   * with flexible latency requirements (on the order of hours).\n   */\n  Archive = \"Archive\"\n}\n\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughtput per PageBlobTier.\n */\nexport enum PremiumPageBlobTier {\n  /**\n   * P4 Tier.\n   */\n  P4 = \"P4\",\n  /**\n   * P6 Tier.\n   */\n  P6 = \"P6\",\n  /**\n   * P10 Tier.\n   */\n  P10 = \"P10\",\n  /**\n   * P15 Tier.\n   */\n  P15 = \"P15\",\n  /**\n   * P20 Tier.\n   */\n  P20 = \"P20\",\n  /**\n   * P30 Tier.\n   */\n  P30 = \"P30\",\n  /**\n   * P40 Tier.\n   */\n  P40 = \"P40\",\n  /**\n   * P50 Tier.\n   */\n  P50 = \"P50\",\n  /**\n   * P60 Tier.\n   */\n  P60 = \"P60\",\n  /**\n   * P70 Tier.\n   */\n  P70 = \"P70\",\n  /**\n   * P80 Tier.\n   */\n  P80 = \"P80\"\n}\n\nexport function toAccessTier(\n  tier: BlockBlobTier | PremiumPageBlobTier | string | undefined\n): AccessTier | undefined {\n  if (tier == undefined) {\n    return undefined;\n  }\n\n  return tier as AccessTier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\n\nexport function ensureCpkIfSpecified(cpk: CpkInfo | undefined, isHttps: boolean) {\n  if (cpk && !isHttps) {\n    throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n  }\n\n  if (cpk && !cpk.encryptionAlgorithm) {\n    cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;\n  }\n}\n"]}