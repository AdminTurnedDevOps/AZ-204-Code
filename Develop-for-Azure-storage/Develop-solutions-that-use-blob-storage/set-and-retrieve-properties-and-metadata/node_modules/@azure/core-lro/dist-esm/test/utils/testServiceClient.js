// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __extends, __generator } from "tslib";
import { ServiceClient } from "@azure/core-http";
var TestServiceClient = /** @class */ (function (_super) {
    __extends(TestServiceClient, _super);
    function TestServiceClient(credentials, options) {
        var _this = _super.call(this, credentials, options) || this;
        _this.responses = [];
        _this.credentials = credentials;
        _this.totalSentRequests = 0;
        return _this;
    }
    TestServiceClient.prototype.setResponses = function (responses) {
        this.initialResponse = responses[0];
        this.responses = responses.slice(1, -1);
        this.finalResponse = responses[responses.length - 1];
    };
    // Normally we would call this.client.sendRequest, from the ServiceClient class.
    TestServiceClient.prototype.sendRequest = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options && options.abortSignal && options.abortSignal.aborted) {
                    throw new Error("The operation was aborted.");
                }
                this.totalSentRequests += 1;
                return [2 /*return*/, this.responses.shift()];
            });
        });
    };
    TestServiceClient.prototype.sendInitialRequest = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options && options.abortSignal && options.abortSignal.aborted) {
                    throw new Error("The operation was aborted.");
                }
                this.totalSentRequests += 1;
                return [2 /*return*/, this.initialResponse];
            });
        });
    };
    TestServiceClient.prototype.sendFinalRequest = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options && options.abortSignal && options.abortSignal.aborted) {
                    throw new Error("The operation was aborted.");
                }
                this.totalSentRequests += 1;
                return [2 /*return*/, this.finalResponse];
            });
        });
    };
    return TestServiceClient;
}(ServiceClient));
export { TestServiceClient };
//# sourceMappingURL=testServiceClient.js.map