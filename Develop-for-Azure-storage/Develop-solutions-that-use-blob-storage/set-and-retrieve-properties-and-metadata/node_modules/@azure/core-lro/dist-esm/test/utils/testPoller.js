// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __assign, __awaiter, __extends, __generator } from "tslib";
import { delay } from "@azure/core-http";
import { Poller } from "../../src";
import { makeOperation } from "./testOperation";
var TestPoller = /** @class */ (function (_super) {
    __extends(TestPoller, _super);
    function TestPoller(client, intervalInMs, requestOptions, baseOperation, onProgress) {
        if (intervalInMs === void 0) { intervalInMs = 10; }
        var _this = this;
        var state = {
            client: client
        };
        if (baseOperation) {
            state = __assign(__assign({}, JSON.parse(baseOperation).state), state);
        }
        var operation = makeOperation(__assign(__assign({}, state), { client: client,
            requestOptions: requestOptions }));
        _this = _super.call(this, operation) || this;
        if (onProgress) {
            _this.onProgress(onProgress);
        }
        _this.intervalInMs = intervalInMs;
        return _this;
    }
    Object.defineProperty(TestPoller.prototype, "initialResponse", {
        get: function () {
            return this.operation.state.initialResponse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestPoller.prototype, "previousResponse", {
        get: function () {
            return this.operation.state.previousResponse;
        },
        enumerable: true,
        configurable: true
    });
    TestPoller.prototype.delay = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, delay(this.intervalInMs)];
            });
        });
    };
    /**
     * The getOperationState() from TestPoller returns an object
     * with the subset of properties from TestOperationState that are
     * safe to be shared with the public.
     */
    TestPoller.prototype.getOperationState = function () {
        var state = this.operation.state;
        return {
            // Properties from PollOperationState<TResult>
            isStarted: state.isStarted,
            isCompleted: state.isCompleted,
            isCancelled: state.isCancelled,
            error: state.error,
            result: state.result,
            // The only other property needed by PublicTestOperationState.
            // The other properties from TestOperationState will be hidden from the user.
            previousResponse: state.previousResponse
        };
    };
    return TestPoller;
}(Poller));
export { TestPoller };
//# sourceMappingURL=testPoller.js.map