{"version":3,"file":"testNonCancellablePoller.js","sourceRoot":"","sources":["../../../test/utils/testNonCancellablePoller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,KAAK,EAA6C,MAAM,kBAAkB,CAAC;AACpF,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,OAAO,EAAE,aAAa,EAAsB,MAAM,iBAAiB,CAAC;AAEpE;IAA8C,4CAAkC;IAG9E,kCACE,MAAyB,EACzB,YAAyB,EACzB,cAAmC,EACnC,aAAsB,EACtB,UAAgD;QAHhD,6BAAA,EAAA,iBAAyB;QAF3B,iBA+BC;QAxBC,IAAI,KAAK,GAAuB;YAC9B,MAAM,QAAA;SACP,CAAC;QAEF,IAAI,aAAa,EAAE;YACjB,KAAK,yBACA,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,KAAK,GAC/B,KAAK,CACT,CAAC;SACH;QAED,IAAM,SAAS,GAAG,aAAa,uBAC1B,KAAK,KACR,MAAM,QAAA;YACN,cAAc,gBAAA,EACd,iBAAiB,EAAE,IAAI,IACvB,CAAC;QAEH,QAAA,kBAAM,SAAS,CAAC,SAAC;QAEjB,IAAI,UAAU,EAAE;YACd,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAC7B;QACD,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;IACnC,CAAC;IAED,sBAAW,qDAAe;aAA1B;YACE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC;QAC9C,CAAC;;;OAAA;IAED,sBAAW,sDAAgB;aAA3B;YACE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC;QAC/C,CAAC;;;OAAA;IAEK,wCAAK,GAAX;;;gBACE,sBAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAC;;;KACjC;IAED;;OAEG;IACI,oDAAiB,GAAxB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,CAAC;IACH,+BAAC;AAAD,CAAC,AAtDD,CAA8C,MAAM,GAsDnD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, RequestOptionsBase, HttpOperationResponse } from \"@azure/core-http\";\nimport { Poller } from \"../../src\";\nimport { TestServiceClient } from \"./testServiceClient\";\nimport { makeOperation, TestOperationState } from \"./testOperation\";\n\nexport class TestNonCancellablePoller extends Poller<TestOperationState, string> {\n  public intervalInMs: number;\n\n  constructor(\n    client: TestServiceClient,\n    intervalInMs: number = 10,\n    requestOptions?: RequestOptionsBase,\n    baseOperation?: string,\n    onProgress?: (state: TestOperationState) => void\n  ) {\n    let state: TestOperationState = {\n      client\n    };\n\n    if (baseOperation) {\n      state = {\n        ...JSON.parse(baseOperation).state,\n        ...state\n      };\n    }\n\n    const operation = makeOperation({\n      ...state,\n      client,\n      requestOptions,\n      unsupportedCancel: true\n    });\n\n    super(operation);\n\n    if (onProgress) {\n      this.onProgress(onProgress);\n    }\n    this.intervalInMs = intervalInMs;\n  }\n\n  public get initialResponse(): HttpOperationResponse | undefined {\n    return this.operation.state.initialResponse;\n  }\n\n  public get previousResponse(): HttpOperationResponse | undefined {\n    return this.operation.state.previousResponse;\n  }\n\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n\n  /**\n   * Can be used to get a publicly safe version of the poller state.\n   */\n  public getOperationState(): TestOperationState {\n    return this.operation.state;\n  }\n}\n"]}