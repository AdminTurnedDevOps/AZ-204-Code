{"version":3,"file":"testServiceClient.js","sourceRoot":"","sources":["../../../test/utils/testServiceClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAEL,aAAa,EAKd,MAAM,kBAAkB,CAAC;AAE1B;IAAuC,qCAAa;IAOlD,2BACE,WAAuD,EACvD,OAA8B;QAFhC,YAIE,kBAAM,WAAW,EAAE,OAAO,CAAC,SAG5B;QAbO,eAAS,GAA4B,EAAE,CAAC;QAW9C,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,KAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;;IAC7B,CAAC;IAEM,wCAAY,GAAnB,UAAoB,SAAkC;QACpD,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,gFAAgF;IACnE,uCAAW,GAAxB,UAAyB,OAA4B;;;gBACnD,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;oBACjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;iBAC/C;gBACD,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;gBAC5B,sBAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAG,EAAC;;;KAChC;IACY,8CAAkB,GAA/B,UAAgC,OAA4B;;;gBAC1D,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;oBACjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;iBAC/C;gBACD,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;gBAC5B,sBAAO,IAAI,CAAC,eAAgB,EAAC;;;KAC9B;IACY,4CAAgB,GAA7B,UAA8B,OAA4B;;;gBACxD,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;oBACjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;iBAC/C;gBACD,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;gBAC5B,sBAAO,IAAI,CAAC,aAAc,EAAC;;;KAC5B;IACH,wBAAC;AAAD,CAAC,AA5CD,CAAuC,aAAa,GA4CnD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpOperationResponse,\n  ServiceClient,\n  ServiceClientCredentials,\n  ServiceClientOptions,\n  TokenCredential,\n  RequestOptionsBase\n} from \"@azure/core-http\";\n\nexport class TestServiceClient extends ServiceClient {\n  private responses: HttpOperationResponse[] = [];\n  private initialResponse?: HttpOperationResponse;\n  private finalResponse?: HttpOperationResponse;\n  public credentials: TokenCredential | ServiceClientCredentials;\n  public totalSentRequests: number;\n\n  constructor(\n    credentials: TokenCredential | ServiceClientCredentials,\n    options?: ServiceClientOptions\n  ) {\n    super(credentials, options);\n    this.credentials = credentials;\n    this.totalSentRequests = 0;\n  }\n\n  public setResponses(responses: HttpOperationResponse[]): void {\n    this.initialResponse = responses[0];\n    this.responses = responses.slice(1, -1);\n    this.finalResponse = responses[responses.length - 1];\n  }\n\n  // Normally we would call this.client.sendRequest, from the ServiceClient class.\n  public async sendRequest(options?: RequestOptionsBase): Promise<HttpOperationResponse> {\n    if (options && options.abortSignal && options.abortSignal.aborted) {\n      throw new Error(\"The operation was aborted.\");\n    }\n    this.totalSentRequests += 1;\n    return this.responses.shift()!;\n  }\n  public async sendInitialRequest(options?: RequestOptionsBase): Promise<HttpOperationResponse> {\n    if (options && options.abortSignal && options.abortSignal.aborted) {\n      throw new Error(\"The operation was aborted.\");\n    }\n    this.totalSentRequests += 1;\n    return this.initialResponse!;\n  }\n  public async sendFinalRequest(options?: RequestOptionsBase): Promise<HttpOperationResponse> {\n    if (options && options.abortSignal && options.abortSignal.aborted) {\n      throw new Error(\"The operation was aborted.\");\n    }\n    this.totalSentRequests += 1;\n    return this.finalResponse!;\n  }\n}\n"]}