{"version":3,"file":"testClient.test.js","sourceRoot":"","sources":["../../test/testClient.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport assert from \"assert\";\nimport { delay, WebResource, HttpHeaders, isNode } from \"@azure/core-http\";\nimport { TestClient } from \"./utils/testClient\";\nimport { PollerStoppedError, PollerCancelledError } from \"../src\";\nimport { TestTokenCredential } from \"./utils/testTokenCredential\";\nimport { TestOperationState } from \"./utils/testOperation\";\n\nconst testHttpHeaders: HttpHeaders = new HttpHeaders();\nconst testHttpRequest: WebResource = new WebResource();\nconst basicResponseStructure = {\n  headers: testHttpHeaders,\n  parsedBody: {},\n  request: testHttpRequest,\n  status: 200\n};\nconst initialResponse = {\n  ...basicResponseStructure,\n  parsedBody: {\n    started: true\n  }\n};\nconst doFinalResponse = {\n  ...basicResponseStructure,\n  parsedBody: {\n    doFinalResponse: true\n  }\n};\nconst finalResponse = {\n  ...basicResponseStructure,\n  parsedBody: {\n    finished: true\n  }\n};\n\ndescribe(\"Long Running Operations - custom client\", function() {\n  it(\"can automatically poll a long running operation with one promise\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([initialResponse, doFinalResponse, finalResponse]);\n\n    const poller = await client.startLRO();\n\n    // In our tests, startLRO will do the first request for us\n    assert.equal(client.totalSentRequests, 1);\n\n    // Waiting until the operation completes\n    const result = await poller.pollUntilDone();\n\n    // Checking the serialized version of the operation\n    let serializedOperation: { state: TestOperationState } = JSON.parse(poller.toString());\n    assert.ok(serializedOperation.state.isStarted);\n\n    assert.ok(poller.initialResponse!.parsedBody.started);\n    assert.ok(poller.previousResponse!.parsedBody.finished);\n    assert.ok(poller.getOperationState().isCompleted);\n    assert.equal(result, \"Done\");\n  });\n\n  if (isNode) {\n    it(\"won't throw UnhandledPromiseRejectionWarnings when poll called without pollUntilDone\", async function() {\n      // NOTE: Don't set any responses so that poller.poll throws an error\n      const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n      let foundUnhandled = false;\n      const checker = () => {\n        foundUnhandled = true;\n      };\n\n      process.once(\"unhandledRejection\", checker);\n      try {\n        await client.startLRO();\n        throw new Error(\"Test failure\");\n      } catch (err) {\n        assert.notEqual(err.message, \"Test failure\", \"client.startLRO did not throw an error.\");\n        // delay(0) gives the event loop a chance emit the UnhandledPromiseRejectionWarning so we can catch it.\n        await delay(0);\n        assert.equal(foundUnhandled, false, \"An UnhandledPromiseRejectionWarning was thrown.\");\n      }\n    });\n  }\n\n  it(\"can poll a long running operation with more than one promise\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([initialResponse, doFinalResponse, finalResponse]);\n\n    const poller = await client.startLRO();\n\n    await poller.poll();\n    assert.ok(poller.previousResponse!.parsedBody.doFinalResponse);\n\n    let result = await poller.getResult();\n    assert.equal(result, undefined);\n\n    await poller.pollUntilDone();\n    assert.ok(poller.previousResponse!.parsedBody.finished);\n    assert.ok(poller.getOperationState().isCompleted);\n\n    result = await poller.getResult();\n    assert.equal(result, \"Done\");\n  });\n\n  it(\"can cancel the operation (when cancellation is supported)\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([initialResponse, ...Array(20).fill(basicResponseStructure)]);\n\n    const poller = await client.startLRO();\n\n    assert.equal(client.totalSentRequests, 1);\n\n    // Testing the cancelled error\n    poller.pollUntilDone().catch((e) => {\n      assert.ok(e instanceof PollerCancelledError);\n      assert.equal(e.name, \"PollerCancelledError\");\n      assert.equal(e.message, \"Poller cancelled\");\n    });\n    // The poller will appear as unstopped, since we're waiting until finishes\n    assert.ok(!poller.isStopped());\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 11);\n\n    await poller.cancelOperation();\n    assert.ok(poller.getOperationState().isCancelled);\n\n    // Cancelling a poller stops it\n    assert.ok(poller.isStopped());\n  });\n\n  it(\"fails to cancel the operation (when cancellation is not supported)\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([initialResponse, ...Array(20).fill(basicResponseStructure)]);\n\n    const poller = await client.startNonCancellableLRO();\n    assert.equal(client.totalSentRequests, 1);\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 11);\n\n    let error: any;\n    try {\n      await poller.cancelOperation();\n    } catch (e) {\n      error = e;\n    }\n    assert.equal(error.message, \"Cancellation not supported\");\n  });\n\n  it(\"can stop polling the operation\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([initialResponse, ...Array(20).fill(basicResponseStructure)]);\n\n    const poller = await client.startLRO();\n    assert.equal(client.totalSentRequests, 1);\n\n    poller.pollUntilDone().catch((e) => {\n      assert.ok(e instanceof PollerStoppedError);\n      assert.equal(e.name, \"PollerStoppedError\");\n      assert.equal(e.message, \"This poller is already stopped\");\n    });\n\n    await poller.poll();\n    assert.equal(client.totalSentRequests, 2);\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 12);\n\n    poller.stopPolling();\n\n    await delay(100);\n\n    assert.equal(client.totalSentRequests, 12);\n  });\n\n  it(\"can document progress\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([\n      initialResponse,\n      ...Array(10).fill(basicResponseStructure),\n      doFinalResponse,\n      finalResponse\n    ]);\n\n    let totalOperationUpdates = 0;\n    const poller = await client.startLRO({\n      onProgress: (_) => {\n        totalOperationUpdates++;\n      }\n    });\n\n    const result = await poller.pollUntilDone();\n    assert.equal(result, \"Done\");\n    assert.equal(poller.getResult(), \"Done\");\n\n    // Progress only after the poller has started and before the poller is done\n    assert.equal(totalOperationUpdates, 11);\n  });\n\n  it(\"can reuse one poller state to instantiate another poller\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n\n    // A total of 13 expected responses.\n    const responses = [\n      initialResponse,\n      ...Array(10).fill(basicResponseStructure),\n      doFinalResponse,\n      finalResponse\n    ];\n    client.setResponses(responses);\n\n    const poller = await client.startLRO();\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 11);\n\n    // Let's try to resume this with a new poller.\n    const serialized = poller.toString();\n    const client2 = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client2.setResponses(responses);\n    const poller2 = await client2.startLRO({\n      baseOperation: serialized\n    });\n\n    assert.equal(client2.totalSentRequests, 1);\n\n    const result = await poller2.pollUntilDone();\n    assert.equal(result, \"Done\");\n\n    // The second client doesn't do the first request and goes all the way to the end.\n    assert.equal(client2.totalSentRequests, 12);\n  });\n});\n"]}