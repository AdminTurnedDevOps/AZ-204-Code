// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
import assert from "assert";
import { delay, WebResource, HttpHeaders } from "@azure/core-http";
import { TestClient } from "./utils/testClient";
import { AbortController } from "@azure/abort-controller";
import { PollerStoppedError } from "../src";
import { TestTokenCredential } from "./utils/testTokenCredential";
var testHttpHeaders = new HttpHeaders();
var testHttpRequest = new WebResource();
var basicResponseStructure = {
    headers: testHttpHeaders,
    parsedBody: {},
    request: testHttpRequest,
    status: 200
};
var initialResponse = __assign(__assign({}, basicResponseStructure), { parsedBody: {
        started: true
    } });
var doFinalResponse = __assign(__assign({}, basicResponseStructure), { parsedBody: {
        doFinalResponse: true
    } });
var finalResponse = __assign(__assign({}, basicResponseStructure), { parsedBody: {
        finished: true
    } });
describe("Long Running Operations - working with abort signals", function () {
    it("should support an abort signal sent through the constructor", function () {
        return __awaiter(this, void 0, void 0, function () {
            var client, abortController, poller, pollError, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new TestClient(new TestTokenCredential("my-test-token"));
                        client.setResponses(__spreadArrays([
                            initialResponse
                        ], Array(20).fill(basicResponseStructure), [
                            doFinalResponse,
                            finalResponse
                        ]));
                        abortController = new AbortController();
                        return [4 /*yield*/, client.startLRO({
                                requestOptions: {
                                    abortSignal: abortController.signal
                                }
                            })];
                    case 1:
                        poller = _a.sent();
                        poller.pollUntilDone().catch(function (e) {
                            pollError = e;
                        });
                        i = 1;
                        _a.label = 2;
                    case 2:
                        if (!(i <= 10)) return [3 /*break*/, 5];
                        return [4 /*yield*/, poller.poll()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        assert.equal(client.totalSentRequests, 11);
                        abortController.abort();
                        return [4 /*yield*/, delay(50)];
                    case 6:
                        _a.sent();
                        assert.equal(pollError.message, "The operation was aborted.");
                        assert.equal(client.totalSentRequests, 11);
                        return [2 /*return*/];
                }
            });
        });
    });
    it("should support an abort signal sent through the parameters of poll()", function () {
        return __awaiter(this, void 0, void 0, function () {
            var client, abortController, poller, donePromise, pollError, e_1, doneError, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new TestClient(new TestTokenCredential("my-test-token"));
                        client.setResponses(__spreadArrays([
                            initialResponse
                        ], Array(20).fill(basicResponseStructure), [
                            doFinalResponse,
                            finalResponse
                        ]));
                        abortController = new AbortController();
                        return [4 /*yield*/, client.startLRO()];
                    case 1:
                        poller = _a.sent();
                        donePromise = poller.pollUntilDone();
                        return [4 /*yield*/, poller.poll()];
                    case 2:
                        _a.sent();
                        assert.equal(client.totalSentRequests, 2);
                        abortController.abort();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, poller.poll({
                                abortSignal: abortController.signal
                            })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        pollError = e_1;
                        return [3 /*break*/, 6];
                    case 6:
                        assert.equal(pollError.message, "The operation was aborted.");
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, donePromise];
                    case 8:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 9:
                        e_2 = _a.sent();
                        doneError = e_2;
                        return [3 /*break*/, 10];
                    case 10:
                        assert.equal(doneError.message, "The operation was aborted.");
                        assert.equal(client.totalSentRequests, 2);
                        assert.ok(poller.isDone());
                        return [2 /*return*/];
                }
            });
        });
    });
    it("can abort the cancel method (when cancellation is supported) by with an abortSignal sent from the constructor", function () {
        return __awaiter(this, void 0, void 0, function () {
            var client, abortController, poller, i, cancelError, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new TestClient(new TestTokenCredential("my-test-token"));
                        client.setResponses(__spreadArrays([
                            initialResponse
                        ], Array(20).fill(basicResponseStructure), [
                            doFinalResponse,
                            finalResponse
                        ]));
                        abortController = new AbortController();
                        return [4 /*yield*/, client.startLRO({
                                requestOptions: {
                                    abortSignal: abortController.signal
                                }
                            })];
                    case 1:
                        poller = _a.sent();
                        i = 1;
                        _a.label = 2;
                    case 2:
                        if (!(i <= 10)) return [3 /*break*/, 5];
                        return [4 /*yield*/, poller.poll()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        assert.equal(client.totalSentRequests, 11);
                        abortController.abort();
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, poller.cancelOperation()];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        e_3 = _a.sent();
                        cancelError = e_3;
                        return [3 /*break*/, 9];
                    case 9:
                        assert.ok(poller.isStopped());
                        assert.equal(cancelError.message, "The operation was aborted.");
                        return [2 /*return*/];
                }
            });
        });
    });
    it("can abort the cancel method (when cancellation is supported) by with an abortSignal sent as a parameter to cancelOperation()", function () {
        return __awaiter(this, void 0, void 0, function () {
            var client, poller, i, abortController, cancelError, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new TestClient(new TestTokenCredential("my-test-token"));
                        client.setResponses(__spreadArrays([
                            initialResponse
                        ], Array(20).fill(basicResponseStructure), [
                            doFinalResponse,
                            finalResponse
                        ]));
                        return [4 /*yield*/, client.startLRO()];
                    case 1:
                        poller = _a.sent();
                        assert.equal(client.totalSentRequests, 1);
                        // Testing subscriptions to the poll errors
                        poller.pollUntilDone().catch(function (e) {
                            assert.ok(e instanceof PollerStoppedError);
                            assert.equal(e.name, "PollerStoppedError");
                            assert.equal(e.message, "This poller is already stopped");
                        });
                        i = 1;
                        _a.label = 2;
                    case 2:
                        if (!(i <= 10)) return [3 /*break*/, 5];
                        return [4 /*yield*/, poller.poll()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        assert.equal(client.totalSentRequests, 11);
                        abortController = new AbortController();
                        abortController.abort();
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, poller.cancelOperation({
                                abortSignal: abortController.signal
                            })];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        e_4 = _a.sent();
                        cancelError = e_4;
                        return [3 /*break*/, 9];
                    case 9:
                        assert.equal(cancelError.message, "The operation was aborted.");
                        poller.stopPolling();
                        return [2 /*return*/];
                }
            });
        });
    });
});
//# sourceMappingURL=abort.test.js.map