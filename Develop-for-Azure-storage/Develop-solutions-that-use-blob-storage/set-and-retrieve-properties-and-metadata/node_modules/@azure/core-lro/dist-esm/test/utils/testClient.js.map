{"version":3,"file":"testClient.js","sourceRoot":"","sources":["../../../test/utils/testClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAQlC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAUtE;IAAgC,8BAAiB;IAC/C,oBACE,WAAuD,EACvD,OAA8B;eAE9B,kBAAM,WAAW,EAAE,OAAO,CAAC;IAC7B,CAAC;IAEY,6BAAQ,GAArB,UAAsB,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;;;;;;wBAC3C,MAAM,GAAG,IAAI,UAAU,CAC3B,IAAI,EACJ,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,cAAc,EACtB,OAAO,CAAC,aAAa,EACrB,OAAO,CAAC,UAAU,CACnB,CAAC;wBACF,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;wBAAnB,SAAmB,CAAC,CAAC,kBAAkB;wBACvC,sBAAO,MAAM,EAAC;;;;KACf;IAEY,2CAAsB,GAAnC,UACE,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;;;;;;wBAEvB,MAAM,GAAG,IAAI,wBAAwB,CACzC,IAAI,EACJ,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,cAAc,EACtB,OAAO,CAAC,aAAa,EACrB,OAAO,CAAC,UAAU,CACnB,CAAC;wBACF,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;wBAAnB,SAAmB,CAAC,CAAC,kBAAkB;wBACvC,sBAAO,MAAM,EAAC;;;;KACf;IACH,iBAAC;AAAD,CAAC,AAjCD,CAAgC,iBAAiB,GAiChD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ServiceClientCredentials,\n  ServiceClientOptions,\n  TokenCredential,\n  RequestOptionsBase\n} from \"@azure/core-http\";\nimport { TestServiceClient } from \"./testServiceClient\";\nimport { TestPoller } from \"./testPoller\";\nimport { TestNonCancellablePoller } from \"./testNonCancellablePoller\";\nimport { TestOperationState } from \"./testOperation\";\n\ninterface StartLROOptions {\n  intervalInMs?: number;\n  requestOptions?: RequestOptionsBase;\n  baseOperation?: string;\n  onProgress?: (state: TestOperationState) => void;\n}\n\nexport class TestClient extends TestServiceClient {\n  constructor(\n    credentials: TokenCredential | ServiceClientCredentials,\n    options?: ServiceClientOptions\n  ) {\n    super(credentials, options);\n  }\n\n  public async startLRO(options: StartLROOptions = {}): Promise<TestPoller> {\n    const poller = new TestPoller(\n      this,\n      options.intervalInMs,\n      options.requestOptions,\n      options.baseOperation,\n      options.onProgress\n    );\n    await poller.poll(); // Initial request\n    return poller;\n  }\n\n  public async startNonCancellableLRO(\n    options: StartLROOptions = {}\n  ): Promise<TestNonCancellablePoller> {\n    const poller = new TestNonCancellablePoller(\n      this,\n      options.intervalInMs,\n      options.requestOptions,\n      options.baseOperation,\n      options.onProgress\n    );\n    await poller.poll(); // Initial request\n    return poller;\n  }\n}\n"]}