{"version":3,"file":"abort.test.js","sourceRoot":"","sources":["../../test/abort.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport assert from \"assert\";\nimport { delay, WebResource, HttpHeaders } from \"@azure/core-http\";\nimport { TestClient } from \"./utils/testClient\";\nimport { AbortController } from \"@azure/abort-controller\";\nimport { PollerStoppedError } from \"../src\";\nimport { TestTokenCredential } from \"./utils/testTokenCredential\";\n\nconst testHttpHeaders: HttpHeaders = new HttpHeaders();\nconst testHttpRequest: WebResource = new WebResource();\nconst basicResponseStructure = {\n  headers: testHttpHeaders,\n  parsedBody: {},\n  request: testHttpRequest,\n  status: 200\n};\nconst initialResponse = {\n  ...basicResponseStructure,\n  parsedBody: {\n    started: true\n  }\n};\nconst doFinalResponse = {\n  ...basicResponseStructure,\n  parsedBody: {\n    doFinalResponse: true\n  }\n};\nconst finalResponse = {\n  ...basicResponseStructure,\n  parsedBody: {\n    finished: true\n  }\n};\n\ndescribe(\"Long Running Operations - working with abort signals\", function() {\n  it(\"should support an abort signal sent through the constructor\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([\n      initialResponse,\n      ...Array(20).fill(basicResponseStructure),\n      doFinalResponse,\n      finalResponse\n    ]);\n\n    const abortController = new AbortController();\n    const poller = await client.startLRO({\n      requestOptions: {\n        abortSignal: abortController.signal\n      }\n    });\n\n    // Testing subscriptions to the poll errors\n    let pollError: Error | undefined;\n    poller.pollUntilDone().catch((e) => {\n      pollError = e;\n    });\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 11);\n    abortController.abort();\n    await delay(50);\n\n    assert.equal(pollError!.message, \"The operation was aborted.\");\n    assert.equal(client.totalSentRequests, 11);\n  });\n\n  it(\"should support an abort signal sent through the parameters of poll()\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([\n      initialResponse,\n      ...Array(20).fill(basicResponseStructure),\n      doFinalResponse,\n      finalResponse\n    ]);\n\n    const abortController = new AbortController();\n    const poller = await client.startLRO();\n\n    const donePromise = poller.pollUntilDone();\n\n    await poller.poll();\n    assert.equal(client.totalSentRequests, 2);\n\n    abortController.abort();\n\n    let pollError: Error | undefined;\n    try {\n      await poller.poll({\n        abortSignal: abortController.signal\n      });\n    } catch (e) {\n      pollError = e;\n    }\n    assert.equal(pollError!.message, \"The operation was aborted.\");\n\n    let doneError: Error | undefined;\n    try {\n      await donePromise;\n    } catch (e) {\n      doneError = e;\n    }\n    assert.equal(doneError!.message, \"The operation was aborted.\");\n\n    assert.equal(client.totalSentRequests, 2);\n    assert.ok(poller.isDone());\n  });\n\n  it(\"can abort the cancel method (when cancellation is supported) by with an abortSignal sent from the constructor\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([\n      initialResponse,\n      ...Array(20).fill(basicResponseStructure),\n      doFinalResponse,\n      finalResponse\n    ]);\n\n    const abortController = new AbortController();\n    const poller = await client.startLRO({\n      requestOptions: {\n        abortSignal: abortController.signal\n      }\n    });\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 11);\n\n    abortController.abort();\n    let cancelError: Error | undefined;\n    try {\n      await poller.cancelOperation();\n    } catch (e) {\n      cancelError = e;\n    }\n\n    assert.ok(poller.isStopped());\n    assert.equal(cancelError!.message, \"The operation was aborted.\");\n  });\n\n  it(\"can abort the cancel method (when cancellation is supported) by with an abortSignal sent as a parameter to cancelOperation()\", async function() {\n    const client = new TestClient(new TestTokenCredential(\"my-test-token\"));\n    client.setResponses([\n      initialResponse,\n      ...Array(20).fill(basicResponseStructure),\n      doFinalResponse,\n      finalResponse\n    ]);\n\n    const poller = await client.startLRO();\n    assert.equal(client.totalSentRequests, 1);\n\n    // Testing subscriptions to the poll errors\n    poller.pollUntilDone().catch((e) => {\n      assert.ok(e instanceof PollerStoppedError);\n      assert.equal(e.name, \"PollerStoppedError\");\n      assert.equal(e.message, \"This poller is already stopped\");\n    });\n\n    // Waiting for 10 poller loops\n    for (let i = 1; i <= 10; i++) {\n      await poller.poll();\n    }\n\n    assert.equal(client.totalSentRequests, 11);\n\n    const abortController = new AbortController();\n    abortController.abort();\n\n    let cancelError: Error | undefined;\n    try {\n      await poller.cancelOperation({\n        abortSignal: abortController.signal\n      });\n    } catch (e) {\n      cancelError = e;\n    }\n\n    assert.equal(cancelError!.message, \"The operation was aborted.\");\n    poller.stopPolling();\n  });\n});\n"]}