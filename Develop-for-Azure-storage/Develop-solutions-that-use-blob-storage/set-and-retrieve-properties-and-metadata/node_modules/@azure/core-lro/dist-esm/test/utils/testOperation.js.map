{"version":3,"file":"testOperation.js","sourceRoot":"","sources":["../../../test/utils/testOperation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse, RequestOptionsBase } from \"@azure/core-http\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"../../src\";\nimport { TestServiceClient } from \"./testServiceClient\";\nimport { TestWebResource } from \"./testWebResource\";\n\nexport interface PublicTestOperationState extends PollOperationState<string> {\n  previousResponse?: HttpOperationResponse;\n}\n\nexport interface TestOperationState extends PollOperationState<string> {\n  client?: TestServiceClient;\n  requestOptions?: RequestOptionsBase;\n  initialResponse?: HttpOperationResponse;\n  previousResponse?: HttpOperationResponse;\n  unsupportedCancel?: boolean;\n}\n\nexport interface TestOperation extends PollOperation<TestOperationState, string> {}\n\nasync function update(\n  this: TestOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: TestOperationState) => void;\n  } = {}\n): Promise<TestOperation> {\n  const { client, requestOptions, initialResponse, previousResponse } = this.state;\n  const abortSignal = options.abortSignal || (requestOptions && requestOptions.abortSignal);\n\n  if (!client) {\n    // The client property is assigned to the operation state during the instantiation of the `TestPoller`.\n    // So the client should always exist.\n    // Though `PublicTestOperationState` doesn't have the client property,\n    // so we have to make it optional in `TestOperationState`.\n    throw new Error(\"The client property should exist\");\n  }\n\n  let response: HttpOperationResponse;\n  const doFinalResponse = previousResponse && previousResponse.parsedBody.doFinalResponse;\n\n  if (!initialResponse) {\n    response = await client!.sendInitialRequest(new TestWebResource(abortSignal));\n    this.state.initialResponse = response;\n    this.state.isStarted = true;\n  } else if (doFinalResponse) {\n    response = await client!.sendFinalRequest(new TestWebResource(abortSignal));\n    this.state.isCompleted = true;\n    this.state.result = \"Done\";\n    this.state.previousResponse = response;\n  } else {\n    response = await client!.sendRequest(new TestWebResource(abortSignal));\n    this.state.previousResponse = response;\n  }\n\n  if (!response) {\n    throw new Error(\"Our tests must not run forever\");\n  }\n\n  // Progress only after the poller has started and before the poller is done\n  if (initialResponse && !doFinalResponse && options.fireProgress) {\n    options.fireProgress(this.state);\n  }\n\n  return makeOperation(this.state);\n}\n\nasync function cancel(\n  this: TestOperation,\n  options: { abortSignal?: AbortSignal } = {}\n): Promise<TestOperation> {\n  const requestOptions = this.state.requestOptions;\n  const abortSignal = options.abortSignal || (requestOptions && requestOptions.abortSignal);\n\n  if (abortSignal && abortSignal.aborted) {\n    // Simulating a try catch of an HTTP request that's given an aborted abortSignal.\n    return await this.update({\n      abortSignal\n    }); // This will throw\n  }\n\n  if (this.state.unsupportedCancel) {\n    throw new Error(\"Cancellation not supported\");\n  }\n\n  // Simulating the response of an HTTP Request\n  const response = {\n    status: 205\n  } as HttpOperationResponse;\n\n  return makeOperation({\n    ...this.state,\n    isCancelled: true,\n    previousResponse: response\n  });\n}\n\nfunction toString(this: TestOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\nexport function makeOperation(state: TestOperationState): TestOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n"]}