// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __extends, __generator } from "tslib";
import { TestServiceClient } from "./testServiceClient";
import { TestPoller } from "./testPoller";
import { TestNonCancellablePoller } from "./testNonCancellablePoller";
var TestClient = /** @class */ (function (_super) {
    __extends(TestClient, _super);
    function TestClient(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    TestClient.prototype.startLRO = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var poller;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        poller = new TestPoller(this, options.intervalInMs, options.requestOptions, options.baseOperation, options.onProgress);
                        return [4 /*yield*/, poller.poll()];
                    case 1:
                        _a.sent(); // Initial request
                        return [2 /*return*/, poller];
                }
            });
        });
    };
    TestClient.prototype.startNonCancellableLRO = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var poller;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        poller = new TestNonCancellablePoller(this, options.intervalInMs, options.requestOptions, options.baseOperation, options.onProgress);
                        return [4 /*yield*/, poller.poll()];
                    case 1:
                        _a.sent(); // Initial request
                        return [2 /*return*/, poller];
                }
            });
        });
    };
    return TestClient;
}(TestServiceClient));
export { TestClient };
//# sourceMappingURL=testClient.js.map