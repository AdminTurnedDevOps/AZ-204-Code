import { Attributes } from '@opentelemetry/api';
import { Span as OpenCensusSpan } from '@opencensus/web-types';
import { Tracer as OpenCensusTracer } from '@opencensus/web-types';
import { SpanContext as OTSpanContext } from '@opentelemetry/api';
import { SpanOptions as OTSpanOptions } from '@opentelemetry/api';
import { Span } from '@opentelemetry/api';
import { SpanKind } from '@opentelemetry/api';
import { Status } from '@opentelemetry/api';
import { TimeInput } from '@opentelemetry/api';
import { Tracer } from '@opentelemetry/api';
import { TracerBase } from '@opencensus/web-types';

/**
 * Generates a `SpanContext` given a `traceparent` header value.
 * @param traceParent Serialized span context data as a `traceparent` header value.
 * @returns The `SpanContext` generated from the `traceparent` value.
 */
export declare function extractSpanContextFromTraceParentHeader(traceParentHeader: string): SpanContext | undefined;

/**
 * Generates a `traceparent` value given a span context.
 * @param spanContext Contains context for a specific span.
 * @returns The `spanContext` represented as a `traceparent` value.
 */
export declare function getTraceParentHeader(spanContext: SpanContext): string | undefined;

/**
 * Retrieves the active tracer, or returns a
 * no-op implementation if one is not set.
 */
export declare function getTracer(): Tracer;

/**
 * A no-op implementation of Span that can safely be used without side-effects.
 */
export declare class NoOpSpan implements Span {
    /**
     * Returns the SpanContext associated with this Span.
     */
    context(): OTSpanContext;
    /**
     * Marks the end of Span execution.
     * @param _endTime The time to use as the Span's end time. Defaults to
     * the current time.
     */
    end(_endTime?: number): void;
    /**
     * Sets an attribute on the Span
     * @param _key the attribute key
     * @param _value the attribute value
     */
    setAttribute(_key: string, _value: unknown): this;
    /**
     * Sets attributes on the Span
     * @param _attributes the attributes to add
     */
    setAttributes(_attributes: Attributes): this;
    /**
     * Adds an event to the Span
     * @param _name The name of the event
     * @param _attributes The associated attributes to add for this event
     */
    addEvent(_name: string, _attributes?: Attributes): this;
    /**
     * Sets a status on the span. Overrides the default of CanonicalCode.OK.
     * @param _status The status to set.
     */
    setStatus(_status: Status): this;
    /**
     * Updates the name of the Span
     * @param _name the new Span name
     */
    updateName(_name: string): this;
    /**
     * Returns whether this span will be recorded
     */
    isRecording(): boolean;
}

/**
 * A no-op implementation of Tracer that can be used when tracing
 * is disabled.
 */
export declare class NoOpTracer implements Tracer {
    /**
     * Starts a new Span.
     * @param _name The name of the span.
     * @param _options The SpanOptions used during Span creation.
     */
    startSpan(_name: string, _options?: OTSpanOptions): Span;
    /**
     * Returns the current Span from the current context, if available.
     */
    getCurrentSpan(): Span;
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span The span that provides the context.
     * @param fn The function to be executed.
     */
    withSpan<T extends (...args: unknown[]) => ReturnType<T>>(_span: Span, fn: T): ReturnType<T>;
    /**
     * Bind a Span as the target's scope
     * @param target An object to bind the scope.
     * @param _span A specific Span to use. Otherwise, use the current one.
     */
    bind<T>(target: T, _span?: Span): T;
}
export { OpenCensusSpan }

/**
 * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.
 */
export declare class OpenCensusSpanWrapper implements Span {
    private _span;
    /**
     * The underlying OpenCensus Span
     */
    getWrappedSpan(): OpenCensusSpan;
    /**
     * Wraps an existing OpenCensus Span
     * @param span A Span or RootSpan from OpenCensus
     */
    constructor(span: OpenCensusSpan);
    /**
     * Create a new OpenCensus Span and wrap it.
     * @param tracer The OpenCensus tracer that has been wrapped in OpenCensusTracerWrapper
     * @param name The name of the Span
     * @param options Options for the Span
     */
    constructor(tracer: OpenCensusTracerWrapper, name: string, options?: OTSpanOptions);
    /**
     * Marks the end of Span execution.
     * @param endTime The time to use as the Span's end time. Defaults to
     * the current time.
     */
    end(_endTime?: number): void;
    /**
     * Returns the SpanContext associated with this Span.
     */
    context(): OTSpanContext;
    /**
     * Sets an attribute on the Span
     * @param key the attribute key
     * @param value the attribute value
     */
    setAttribute(key: string, value: unknown): this;
    /**
     * Sets attributes on the Span
     * @param attributes the attributes to add
     */
    setAttributes(attributes: Attributes): this;
    /**
     * Adds an event to the Span
     * @param name The name of the event
     * @param attributes The associated attributes to add for this event
     */
    addEvent(_name: string, _attributes?: Attributes): this;
    /**
     * Sets a status on the span. Overrides the default of CanonicalCode.OK.
     * @param status The status to set.
     */
    setStatus(status: Status): this;
    /**
     * Updates the name of the Span
     * @param name the new Span name
     */
    updateName(name: string): this;
    /**
     * Returns whether this span will be recorded
     */
    isRecording(): boolean;
}
export { OpenCensusTracer }

/**
 * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.
 */
export declare class OpenCensusTracerWrapper implements Tracer {
    private _tracer;
    /**
     * The wrapped OpenCensus Tracer
     */
    getWrappedTracer(): TracerBase;
    /**
     * Create a new wrapper around a given OpenCensus Tracer.
     * @param tracer The OpenCensus Tracer to wrap.
     */
    constructor(tracer: TracerBase);
    /**
     * Starts a new Span.
     * @param name The name of the span.
     * @param options The SpanOptions used during Span creation.
     */
    startSpan(name: string, options?: OTSpanOptions): Span;
    /**
     * Returns the current Span from the current context, if available.
     */
    getCurrentSpan(): Span | undefined;
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span The span that provides the context.
     * @param _fn The function to be executed.
     */
    withSpan<T extends (...args: unknown[]) => unknown>(_span: Span, _fn: T): ReturnType<T>;
    /**
     * Bind a Span as the target's scope
     * @param target An object to bind the scope.
     * @param _span A specific Span to use. Otherwise, use the current one.
     */
    bind<T>(_target: T, _span?: Span): T;
}

/**
 * Tracing options to set on an operation.
 */
export declare interface OperationTracingOptions {
    /**
     * OpenTelemetry SpanOptions used to create a span when tracing is enabled.
     */
    spanOptions?: SpanOptions;
}
export { OTSpanContext }
export { OTSpanOptions }

/**
 * Sets the global tracer, enabling tracing for the Azure SDK.
 * @param tracer An OpenTelemetry Tracer instance.
 */
export declare function setTracer(tracer: Tracer): void;

/**
 * A light interface that tries to be structurally compatible with OpenTelemetry
 */
export declare interface SpanContext {
    /**
     * UUID of a trace.
     */
    traceId: string;
    /**
     * UUID of a Span.
     */
    spanId: string;
    /**
     * https://www.w3.org/TR/trace-context/#trace-flags
     */
    traceFlags: number;
}

/**
 * Contains all the spans for a particular TraceID
 * starting at unparented roots
 */
export declare interface SpanGraph {
    /**
     * All Spans without a parentSpanId
     */
    roots: SpanGraphNode[];
}

/**
 * Simple representation of a Span that only has name and child relationships.
 * Children should be arranged in the order they were created.
 */
export declare interface SpanGraphNode {
    /**
     * The Span name
     */
    name: string;
    /**
     * All child Spans of this Span
     */
    children: SpanGraphNode[];
}

/**
 * An interface that enables manual propagation of Spans
 */
export declare interface SpanOptions {
    /**
     * The SpanContext that refers to a parent span, if any.
     * A null value indicates that this should be a new root span,
     * rather than potentially detecting a span via a context manager.
     */
    parent?: SpanContext | null;
    /**
     * Attributes to set on the Span
     */
    attributes?: {
        [key: string]: unknown;
    };
}

/**
 * A mock span useful for testing.
 */
export declare class TestSpan extends NoOpSpan {
    /**
     * The Span's current name
     */
    name: string;
    /**
     * The Span's current status
     */
    status: Status;
    /**
     * The Span's kind
     */
    kind: SpanKind;
    /**
     * True if end() has been called on the Span
     */
    endCalled: boolean;
    /**
     * The start time of the Span
     */
    readonly startTime: TimeInput;
    /**
     * The id of the parent Span, if any.
     */
    readonly parentSpanId?: string;
    /**
     * Known attributes, if any.
     */
    readonly attributes: Attributes;
    private _context;
    private readonly _tracer;
    /**
     * Starts a new Span.
     * @param parentTracer The tracer that created this Span
     * @param name The name of the span.
     * @param context The SpanContext this span belongs to
     * @param kind The SpanKind of this Span
     * @param parentSpanId The identifier of the parent Span
     * @param startTime The startTime of the event (defaults to now)
     */
    constructor(parentTracer: TestTracer, name: string, context: OTSpanContext, kind: SpanKind, parentSpanId?: string, startTime?: TimeInput);
    /**
     * Returns the Tracer that created this Span
     */
    tracer(): Tracer;
    /**
     * Returns the SpanContext associated with this Span.
     */
    context(): OTSpanContext;
    /**
     * Marks the end of Span execution.
     * @param _endTime The time to use as the Span's end time. Defaults to
     * the current time.
     */
    end(_endTime?: number): void;
    /**
     * Sets a status on the span. Overrides the default of CanonicalCode.OK.
     * @param status The status to set.
     */
    setStatus(status: Status): this;
    /**
     * Returns whether this span will be recorded
     */
    isRecording(): boolean;
    /**
     * Sets an attribute on the Span
     * @param key the attribute key
     * @param value the attribute value
     */
    setAttribute(key: string, value: unknown): this;
    /**
     * Sets attributes on the Span
     * @param attributes the attributes to add
     */
    setAttributes(attributes: Attributes): this;
}

/**
 * A mock tracer useful for testing
 */
export declare class TestTracer extends NoOpTracer {
    private traceIdCounter;
    private getNextTraceId;
    private spanIdCounter;
    private getNextSpanId;
    private rootSpans;
    private knownSpans;
    /**
     * Returns all Spans that were created without a parent
     */
    getRootSpans(): TestSpan[];
    /**
     * Returns all Spans this Tracer knows about
     */
    getKnownSpans(): TestSpan[];
    /**
     * Returns all Spans where end() has not been called
     */
    getActiveSpans(): TestSpan[];
    /**
     * Return all Spans for a particular trace, grouped by their
     * parent Span in a tree-like structure
     * @param traceId The traceId to return the graph for
     */
    getSpanGraph(traceId: string): SpanGraph;
    /**
     * Starts a new Span.
     * @param name The name of the span.
     * @param options The SpanOptions used during Span creation.
     */
    startSpan(name: string, options?: OTSpanOptions): TestSpan;
    private _getParentContext;
}

/**
 * Shorthand enum for common traceFlags values inside SpanContext
 */
export declare const enum TraceFlags {
    /** No flag set. */
    NONE = 0,
    /** Caller is collecting trace information. */
    SAMPLED = 1
}

export { }
